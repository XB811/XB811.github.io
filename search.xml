<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>苍穹外卖</title>
      <link href="/2024/09/16/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/"/>
      <url>/2024/09/16/%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96/</url>
      
        <content type="html"><![CDATA[<p>这是一款<strong>餐厅定制</strong>的软件产品，分为管理端和用户端，管理端供商家也就是餐厅使用，餐饮企业可以通过员工、菜品、套餐和订单，通过工作台、数据统计分析经营数据。用户端是给点餐的顾客使用的，结合了微信小程序，提供在线浏览菜品和套餐、添加购物车、下单和支付等功能。</p><p>文件结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">sky-take-out</span><br><span class="line">├─ pom.xml</span><br><span class="line">├─ README.md</span><br><span class="line">├─ sky-server</span><br><span class="line">│  ├─ pom.xml</span><br><span class="line">│  ├─ sky-server.iml</span><br><span class="line">│  └─ src</span><br><span class="line">│     ├─ test</span><br><span class="line">│     │  └─ java</span><br><span class="line">│     │     └─ com</span><br><span class="line">│     │        └─ sky</span><br><span class="line">│     │           └─ test</span><br><span class="line">│     │              └─ SpringDataRedisTest.java</span><br><span class="line">│     └─ main</span><br><span class="line">│        ├─ resources</span><br><span class="line">│        │  ├─ application-dev.yml</span><br><span class="line">│        │  ├─ application-prod.yml</span><br><span class="line">│        │  ├─ application.yml</span><br><span class="line">│        │  ├─ template</span><br><span class="line">│        │  │  └─ 运营数据报表模板.xlsx</span><br><span class="line">│        │  └─ mapper</span><br><span class="line">│        │     ├─ AddressBookMapper.xml</span><br><span class="line">│        │     ├─ CategoryMapper.xml</span><br><span class="line">│        │     ├─ DishFlavorMapper.xml</span><br><span class="line">│        │     ├─ DishMapper.xml</span><br><span class="line">│        │     ├─ EmployeeMapper.xml</span><br><span class="line">│        │     ├─ OrderDetailMapper.xml</span><br><span class="line">│        │     ├─ OrderMapper.xml</span><br><span class="line">│        │     ├─ SetmealDishMapper.xml</span><br><span class="line">│        │     ├─ SetmealMapper.xml</span><br><span class="line">│        │     ├─ ShoppingCartMapper.xml</span><br><span class="line">│        │     └─ UserMapper.xml</span><br><span class="line">│        └─ java</span><br><span class="line">│           └─ com</span><br><span class="line">│              └─ sky</span><br><span class="line">│                 ├─ SkyApplication.java</span><br><span class="line">│                 ├─ websocket</span><br><span class="line">│                 │  └─ WebSocketServer.java</span><br><span class="line">│                 ├─ task</span><br><span class="line">│                 │  ├─ OrderTask.java</span><br><span class="line">│                 │  └─ WebSocketTask.java</span><br><span class="line">│                 ├─ service</span><br><span class="line">│                 │  ├─ AddressBookService.java</span><br><span class="line">│                 │  ├─ CategoryService.java</span><br><span class="line">│                 │  ├─ DishService.java</span><br><span class="line">│                 │  ├─ EmployeeService.java</span><br><span class="line">│                 │  ├─ OrderService.java</span><br><span class="line">│                 │  ├─ ReportService.java</span><br><span class="line">│                 │  ├─ SetmealService.java</span><br><span class="line">│                 │  ├─ ShoppingCartService.java</span><br><span class="line">│                 │  ├─ UserService.java</span><br><span class="line">│                 │  ├─ WorkspaceService.java</span><br><span class="line">│                 │  └─ impl</span><br><span class="line">│                 │     ├─ AddressBookServiceImpl.java</span><br><span class="line">│                 │     ├─ CategoryServiceImpl.java</span><br><span class="line">│                 │     ├─ DishServiceImpl.java</span><br><span class="line">│                 │     ├─ EmployeeServiceImpl.java</span><br><span class="line">│                 │     ├─ OrderServiceImpl.java</span><br><span class="line">│                 │     ├─ ReportServiceImpl.java</span><br><span class="line">│                 │     ├─ SetmealServiceImpl.java</span><br><span class="line">│                 │     ├─ ShoppingCartServiceImpl.java</span><br><span class="line">│                 │     ├─ UserServiceImpl.java</span><br><span class="line">│                 │     └─ WorkspaceServiceImpl.java</span><br><span class="line">│                 ├─ mapper</span><br><span class="line">│                 │  ├─ AddressBookMapper.java</span><br><span class="line">│                 │  ├─ CategoryMapper.java</span><br><span class="line">│                 │  ├─ DishFlavorMapper.java</span><br><span class="line">│                 │  ├─ DishMapper.java</span><br><span class="line">│                 │  ├─ EmployeeMapper.java</span><br><span class="line">│                 │  ├─ OrderDetailMapper.java</span><br><span class="line">│                 │  ├─ OrderMapper.java</span><br><span class="line">│                 │  ├─ SetmealDishMapper.java</span><br><span class="line">│                 │  ├─ SetmealMapper.java</span><br><span class="line">│                 │  ├─ ShoppingCartMapper.java</span><br><span class="line">│                 │  └─ UserMapper.java</span><br><span class="line">│                 ├─ interceptor</span><br><span class="line">│                 │  ├─ JwtTokenAdminInterceptor.java</span><br><span class="line">│                 │  └─ JwtTokenUserInterceptor.java</span><br><span class="line">│                 ├─ handler</span><br><span class="line">│                 │  └─ GlobalExceptionHandler.java</span><br><span class="line">│                 ├─ controller</span><br><span class="line">│                 │  ├─ user</span><br><span class="line">│                 │  │  ├─ AddressBookController.java</span><br><span class="line">│                 │  │  ├─ CategoryController.java</span><br><span class="line">│                 │  │  ├─ DishController.java</span><br><span class="line">│                 │  │  ├─ OrderController.java</span><br><span class="line">│                 │  │  ├─ SetmealController.java</span><br><span class="line">│                 │  │  ├─ ShopController.java</span><br><span class="line">│                 │  │  ├─ ShoppingCartController.java</span><br><span class="line">│                 │  │  └─ UserController.java</span><br><span class="line">│                 │  ├─ notify</span><br><span class="line">│                 │  │  └─ PayNotifyController.java</span><br><span class="line">│                 │  └─ admin</span><br><span class="line">│                 │     ├─ CategoryController.java</span><br><span class="line">│                 │     ├─ CommonController.java</span><br><span class="line">│                 │     ├─ DishController.java</span><br><span class="line">│                 │     ├─ EmployeeController.java</span><br><span class="line">│                 │     ├─ OrderController.java</span><br><span class="line">│                 │     ├─ ReportController.java</span><br><span class="line">│                 │     ├─ SetmealController.java</span><br><span class="line">│                 │     ├─ ShopController.java</span><br><span class="line">│                 │     └─ WorkSpaceController.java</span><br><span class="line">│                 ├─ config</span><br><span class="line">│                 │  ├─ OssConfiguration.java</span><br><span class="line">│                 │  ├─ RedisConfiguration.java</span><br><span class="line">│                 │  ├─ WebMvcConfiguration.java</span><br><span class="line">│                 │  └─ WebSocketConfiguration.java</span><br><span class="line">│                 ├─ aspect</span><br><span class="line">│                 │  └─ AutoFillAspect.java</span><br><span class="line">│                 └─ annotation</span><br><span class="line">│                    └─ AutoFill.java</span><br><span class="line">├─ sky-pojo</span><br><span class="line">│  ├─ pom.xml</span><br><span class="line">│  ├─ sky-pojo.iml</span><br><span class="line">│  └─ src</span><br><span class="line">│     └─ main</span><br><span class="line">│        └─ java</span><br><span class="line">│           └─ com</span><br><span class="line">│              └─ sky</span><br><span class="line">│                 ├─ vo</span><br><span class="line">│                 │  ├─ BusinessDataVO.java</span><br><span class="line">│                 │  ├─ DishItemVO.java</span><br><span class="line">│                 │  ├─ DishOverViewVO.java</span><br><span class="line">│                 │  ├─ DishVO.java</span><br><span class="line">│                 │  ├─ EmployeeLoginVO.java</span><br><span class="line">│                 │  ├─ OrderOverViewVO.java</span><br><span class="line">│                 │  ├─ OrderPaymentVO.java</span><br><span class="line">│                 │  ├─ OrderReportVO.java</span><br><span class="line">│                 │  ├─ OrderStatisticsVO.java</span><br><span class="line">│                 │  ├─ OrderSubmitVO.java</span><br><span class="line">│                 │  ├─ OrderVO.java</span><br><span class="line">│                 │  ├─ SalesTop10ReportVO.java</span><br><span class="line">│                 │  ├─ SetmealOverViewVO.java</span><br><span class="line">│                 │  ├─ SetmealVO.java</span><br><span class="line">│                 │  ├─ TurnoverReportVO.java</span><br><span class="line">│                 │  ├─ UserLoginVO.java</span><br><span class="line">│                 │  └─ UserReportVO.java</span><br><span class="line">│                 ├─ entity</span><br><span class="line">│                 │  ├─ AddressBook.java</span><br><span class="line">│                 │  ├─ Category.java</span><br><span class="line">│                 │  ├─ Dish.java</span><br><span class="line">│                 │  ├─ DishFlavor.java</span><br><span class="line">│                 │  ├─ Employee.java</span><br><span class="line">│                 │  ├─ OrderDetail.java</span><br><span class="line">│                 │  ├─ Orders.java</span><br><span class="line">│                 │  ├─ Setmeal.java</span><br><span class="line">│                 │  ├─ SetmealDish.java</span><br><span class="line">│                 │  ├─ ShoppingCart.java</span><br><span class="line">│                 │  └─ User.java</span><br><span class="line">│                 └─ dto</span><br><span class="line">│                    ├─ CategoryDTO.java</span><br><span class="line">│                    ├─ CategoryPageQueryDTO.java</span><br><span class="line">│                    ├─ DataOverViewQueryDTO.java</span><br><span class="line">│                    ├─ DishDTO.java</span><br><span class="line">│                    ├─ DishPageQueryDTO.java</span><br><span class="line">│                    ├─ EmployeeDTO.java</span><br><span class="line">│                    ├─ EmployeeLoginDTO.java</span><br><span class="line">│                    ├─ EmployeePageQueryDTO.java</span><br><span class="line">│                    ├─ GoodsSalesDTO.java</span><br><span class="line">│                    ├─ OrdersCancelDTO.java</span><br><span class="line">│                    ├─ OrdersConfirmDTO.java</span><br><span class="line">│                    ├─ OrdersDTO.java</span><br><span class="line">│                    ├─ OrdersPageQueryDTO.java</span><br><span class="line">│                    ├─ OrdersPaymentDTO.java</span><br><span class="line">│                    ├─ OrdersRejectionDTO.java</span><br><span class="line">│                    ├─ OrdersSubmitDTO.java</span><br><span class="line">│                    ├─ PasswordEditDTO.java</span><br><span class="line">│                    ├─ SetmealDTO.java</span><br><span class="line">│                    ├─ SetmealPageQueryDTO.java</span><br><span class="line">│                    ├─ ShoppingCartDTO.java</span><br><span class="line">│                    └─ UserLoginDTO.java</span><br><span class="line">└─ sky-common</span><br><span class="line">   ├─ pom.xml</span><br><span class="line">   ├─ sky-common.iml</span><br><span class="line">   └─ src</span><br><span class="line">      └─ main</span><br><span class="line">         └─ java</span><br><span class="line">            └─ com</span><br><span class="line">               └─ sky</span><br><span class="line">                  ├─ utils</span><br><span class="line">                  │  ├─ AliOssUtil.java</span><br><span class="line">                  │  ├─ HttpClientUtil.java</span><br><span class="line">                  │  ├─ JwtUtil.java</span><br><span class="line">                  │  ├─ QiNiuOSSUtil.java</span><br><span class="line">                  │  └─ WeChatPayUtil.java</span><br><span class="line">                  ├─ result</span><br><span class="line">                  │  ├─ PageResult.java</span><br><span class="line">                  │  └─ Result.java</span><br><span class="line">                  ├─ properties</span><br><span class="line">                  │  ├─ AliOssProperties.java</span><br><span class="line">                  │  ├─ JwtProperties.java</span><br><span class="line">                  │  ├─ QiNiuOssProperties.java</span><br><span class="line">                  │  └─ WeChatProperties.java</span><br><span class="line">                  ├─ json</span><br><span class="line">                  │  └─ JacksonObjectMapper.java</span><br><span class="line">                  ├─ exception</span><br><span class="line">                  │  ├─ AccountLockedException.java</span><br><span class="line">                  │  ├─ AccountNotFoundException.java</span><br><span class="line">                  │  ├─ AddressBookBusinessException.java</span><br><span class="line">                  │  ├─ BaseException.java</span><br><span class="line">                  │  ├─ DeletionNotAllowedException.java</span><br><span class="line">                  │  ├─ LoginFailedException.java</span><br><span class="line">                  │  ├─ OrderBusinessException.java</span><br><span class="line">                  │  ├─ PasswordEditFailedException.java</span><br><span class="line">                  │  ├─ PasswordErrorException.java</span><br><span class="line">                  │  ├─ SetmealEnableFailedException.java</span><br><span class="line">                  │  ├─ ShoppingCartBusinessException.java</span><br><span class="line">                  │  └─ UserNotLoginException.java</span><br><span class="line">                  ├─ enumeration</span><br><span class="line">                  │  └─ OperationType.java</span><br><span class="line">                  ├─ context</span><br><span class="line">                  │  └─ BaseContext.java</span><br><span class="line">                  └─ constant</span><br><span class="line">                     ├─ AutoFillConstant.java</span><br><span class="line">                     ├─ JwtClaimsConstant.java</span><br><span class="line">                     ├─ MessageConstant.java</span><br><span class="line">                     ├─ PasswordConstant.java</span><br><span class="line">                     └─ StatusConstant.java</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> redis </tag>
            
            <tag> jwt </tag>
            
            <tag> springTask </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/10/hello-world/"/>
      <url>/2024/04/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="一、基本教程"><a href="#一、基本教程" class="headerlink" title="一、基本教程"></a>一、基本教程</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>一个hexo搭建网站视频教程：<a href="https://www.bilibili.com/video/BV1q741167PJ/?share_source=copy_web&vd_source=fe1cde7fadcbb51255a53d33ff679e3c">【Hexo搭建个人博客——系列教程】</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java注解与反射</title>
      <link href="/2024/02/28/java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/"/>
      <url>/2024/02/28/java%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章来源：<a href="https://www.cnblogs.com/dengYstudy/articles/16006233.html">Java注解与反射——看完这一篇就够了 - Devin-Y - 博客园 (cnblogs.com)</a></p><p>视频：<a href="https://www.bilibili.com/video/BV1p4411P7V3/">B站_注解与反射</a></p></blockquote><h1 id="注解（Annotation）与反射（Reflection）"><a href="#注解（Annotation）与反射（Reflection）" class="headerlink" title="注解（Annotation）与反射（Reflection）"></a>注解（Annotation）与反射（Reflection）</h1><h2 id="一、注解"><a href="#一、注解" class="headerlink" title="一、注解"></a>一、注解</h2><h3 id="1-1、什么是注解"><a href="#1-1、什么是注解" class="headerlink" title="1.1、什么是注解"></a>1.1、什么是注解</h3><ul><li>Annotation是JDK.5.0开始引入的技术</li><li>Annotation的作用：<ul><li>不是程序本身，可以对程序做出解释。（这一点和注释(comment)没有什么区别）</li><li><strong>可以被其他程序（比如：编译器）读取</strong></li></ul></li><li>Annotation的格式：<ul><li>注解是以”@注释名”在代码中存在的，还可以添加一些参数值，例如：@SuppressWarnings(value&#x3D;”unchecked”);</li></ul></li><li>Annotation在哪里使用？<ul><li>可以附加在package，class，method，field等上面，相当于给它们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//什么是注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> <span class="keyword">extends</span> <span class="title class_">Object</span>&#123;</span><br><span class="line">    <span class="comment">//@Override  重写的注解</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="1-2、内置注解"><a href="#1-2、内置注解" class="headerlink" title="1.2、内置注解"></a>1.2、内置注解</h3><p><strong>@Override</strong>：定义在java.lang.Override中，此注释只适用于修饰方法，表示一个方法声明打算重写超类中的另一个方法声明；</p><p><strong>@Deprecated</strong>：定义在java.lang.Deprecated中，此注释可以用于修饰方法、属性、类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或者存在更好的选择。</p><p><strong>@SuppressWarnings</strong>：定义在java.lang.SuppressWarnings中，用来抑制编译时的警告信息。</p><ul><li>与上面两个注释有所不同，你需要添加一个参数才能正确使用，这些参数都是已经定义好了的，我们选择使用就行！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="meta">@SuppressWarnings(value=&#123;&quot;unchecked&quot;,&quot;Deprecated&quot;&#125;)</span></span><br><span class="line">......</span><br><span class="line"><span class="comment">//测试内置注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> <span class="keyword">extends</span> <span class="title class_">Object</span>&#123;</span><br><span class="line">    <span class="comment">//@Override  重写的注解</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Deprecated 不推荐使用，但是可以使用，或者存在更好的方式</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test--------&gt;Deprecated&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="1-3、元注解"><a href="#1-3、元注解" class="headerlink" title="1.3、元注解"></a>1.3、元注解</h3><ul><li>元注解的作用就是负责注解其他注解，Java定义了4个标准的meta-annotation类型，他们被用来提供对其他annotation类型作说明</li><li>这些类型和它们所支持的类在java.lang.annotation包中可以找到。（@Target，@Retention，@Documented，@Inherited）<ul><li><strong>@Target</strong>：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</li><li><strong>@Retention</strong>：表示需要什么级别保存该注释信息，用于描述注解的生命周期 （SOURCE&lt;CLASS&lt;<strong>RUNTIME</strong>）</li><li>@Documented:说明该注解将被包含在javadoc中</li><li>@Inherited：说明子类可以继承父类中的该注解</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试元注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="comment">//@Target:表示我们的注解可以用在那些地方</span></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@Retention:表示我们的注解在什么地方还有效</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@Documented:表示是否将我们的注解生成在JAVAdoc中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@Inherited:表示子类可以继承父类注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="1-4、自定义注解"><a href="#1-4、自定义注解" class="headerlink" title="1.4、自定义注解"></a>1.4、自定义注解</h3><ul><li>使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口</li><li>分析：<ul><li>@interface用来声明一个注解，格式：public @interface 注解名</li><li>其中每一个方法实际上是声明了一个配置参数</li><li>方法的名称就是参数的名称</li><li>返回值类型就是参数的类型（返回值只能是基本类型，Class，String，enum –&gt;枚举）</li><li>可以通过default来声明参数的默认值</li><li>如果只有一个成员变量，一般参数名为value</li><li>注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line">    <span class="comment">//注解可以显示赋值，如果没有默认值，我们就必须给注释赋值</span></span><br><span class="line">    <span class="meta">@MyAnnotation2(name = &quot;devin&quot;,schools = &#123;&quot;农业大学,农大&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnnotation3(&quot;devin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line">    <span class="comment">//注解的参数：参数类型 + 参数名();</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;<span class="comment">//如果默认值为-1，代表不存在，indexof，如果找不到返回-1</span></span><br><span class="line"></span><br><span class="line">    String[] schools();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation3&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、反射"><a href="#二、反射" class="headerlink" title="二、反射"></a>二、反射</h2><h3 id="2-1、反射概述"><a href="#2-1、反射概述" class="headerlink" title="2.1、反射概述"></a>2.1、反射概述</h3><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314214420732-958932306.png" alt="img"></p><p>Reflection（反射）是Java被视为动态语言的关键，反射机制允许程序在执行期间借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br></pre></td></tr></table></figure><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射！</p><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314214525909-1244877754.png" alt="img"></p><h3 id="2-2、获取反射对象"><a href="#2-2、获取反射对象" class="headerlink" title="2.2、获取反射对象"></a>2.2、获取反射对象</h3><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314214610997-1570984384.png" alt="img"></p><p><strong>反射的优点和缺点</strong></p><ul><li>优点：可以实现动态创建对象和编译，体现出很大的灵活性</li><li>缺点：对性能有影响。使用反射基本上是一种解释操作，可以告诉JVM，我们希望做什么并且满足我们的要求，这类操作总是慢于直接执行相同的操作</li></ul><p><strong>反射相关的主要API</strong></p><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314214631471-1510612240.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//什么叫反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> <span class="keyword">extends</span> <span class="title class_">Object</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//通过反射获取类的Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;注解与反射.reflection.User&quot;</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;注解与反射.reflection.User&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;注解与反射.reflection.User&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;注解与反射.reflection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个类在内存中只有一个Class对象</span></span><br><span class="line">        <span class="comment">//一个类被加载后，类的整个结构都会被封装在Class对象中</span></span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">        System.out.println(c4.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实体类:pojo,entity</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> id, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314214655891-1207021428.png" alt="img"></p><h3 id="2-3、得到Class类的几种方式"><a href="#2-3、得到Class类的几种方式" class="headerlink" title="2.3、得到Class类的几种方式"></a>2.3、得到Class类的几种方式</h3><p><strong>Class类</strong></p><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314214716969-196110726.png" alt="img"></p><hr><p><strong>Class对象常用方法</strong></p><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314214734734-526783320.png" alt="img"></p><hr><p><strong>获取Class类的实例</strong></p><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314214751522-1925049619.png" alt="img"></p><h3 id="2-4、所有类型的Class对象"><a href="#2-4、所有类型的Class对象" class="headerlink" title="2.4、所有类型的Class对象"></a>2.4、所有类型的Class对象</h3><p>那些类型可以有Class对象</p><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314214814767-2037552508.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Object.class;<span class="comment">//类</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Comparable.class;<span class="comment">//接口</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> String[].class;<span class="comment">//数组</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="type">int</span>[][].class;<span class="comment">//二维数组</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> Override.class;<span class="comment">//注解</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">c6</span> <span class="operator">=</span> ElementType.class;<span class="comment">//枚举</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">c7</span> <span class="operator">=</span> Integer.class;<span class="comment">//包装类</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">c8</span> <span class="operator">=</span> <span class="keyword">void</span>.class;<span class="comment">//void</span></span><br><span class="line">       <span class="type">Class</span> <span class="variable">c9</span> <span class="operator">=</span> Class.class;<span class="comment">//Class</span></span><br><span class="line"></span><br><span class="line">       System.out.println(c1);</span><br><span class="line">       System.out.println(c2);</span><br><span class="line">       System.out.println(c3);</span><br><span class="line">       System.out.println(c4);</span><br><span class="line">       System.out.println(c5);</span><br><span class="line">       System.out.println(c6);</span><br><span class="line">       System.out.println(c7);</span><br><span class="line">       System.out.println(c8);</span><br><span class="line">       System.out.println(c9);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//只要元素类型与维度一样，就是同一个Class</span></span><br><span class="line">       <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">       <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">       System.out.println(a.getClass().hashCode());</span><br><span class="line">       System.out.println(b.getClass().hashCode());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5、类加载内存分析"><a href="#2-5、类加载内存分析" class="headerlink" title="2.5、类加载内存分析"></a>2.5、类加载内存分析</h3><p>!<img src="http://qnimg.xblog1.top/typora/2631276-20220314214834883-1103564694.png" alt="img"></p><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314214847055-884222347.png" alt="img"></p><h4 id="类的加载与ClassLoader的理解"><a href="#类的加载与ClassLoader的理解" class="headerlink" title="类的加载与ClassLoader的理解"></a>类的加载与ClassLoader的理解</h4><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314214912706-271145694.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        System.out.println(A.m);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1、加载到内存，会产生一个类对应Class对象</span></span><br><span class="line"><span class="comment">        2、链接，连接结束后 m = 0</span></span><br><span class="line"><span class="comment">        3、初始化</span></span><br><span class="line"><span class="comment">            &lt;clinit&gt;()&#123;</span></span><br><span class="line"><span class="comment">                 System.out.println(&quot;A类静态代码块初始化&quot;);</span></span><br><span class="line"><span class="comment">                 m = 300;</span></span><br><span class="line"><span class="comment">                 m = 100;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            m = 100;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类静态代码块初始化&quot;</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A类无参构造初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6、分析类的初始化"><a href="#2-6、分析类的初始化" class="headerlink" title="2.6、分析类的初始化"></a>2.6、分析类的初始化</h3><p><strong>什么时候会发生类的初始化？</strong></p><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314214928281-816521294.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类什么时候会初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Main被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//1、主动引用</span></span><br><span class="line">        <span class="comment">//Son son = new Son();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射也会产生主动引用</span></span><br><span class="line">        <span class="comment">//Class.forName(&quot;注解与反射.reflection.Son&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//不会产生类的引用的方法</span></span><br><span class="line">        <span class="comment">//System.out.println(Son.b);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Son[] array = new Son[5];</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Son.M);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类被加载&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类被加载&quot;</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">M</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-7、类加载器"><a href="#2-7、类加载器" class="headerlink" title="2.7、类加载器"></a>2.7、类加载器</h3><p><strong>类加载器的作用</strong></p><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314214944023-122711789.png" alt="img"></p><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314215000632-110506347.png" alt="img"></p><h3 id="2-8、获取类的运行时结构"><a href="#2-8、获取类的运行时结构" class="headerlink" title="2.8、获取类的运行时结构"></a>2.8、获取类的运行时结构</h3><p><strong>获取运行时类的完整结构</strong></p><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314215014574-276828650.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得类的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;注解与反射.reflection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类的名字</span></span><br><span class="line">        System.out.println(c1.getName());<span class="comment">//获得包名+类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName());<span class="comment">//获得类名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取类的属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line">        Field[] fields = c1.getFields();<span class="comment">//只能找到public属性</span></span><br><span class="line"><span class="comment">//        for (Field field : fields) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(field);</span></span><br><span class="line"><span class="comment">//        &#125;   未出现打印结果</span></span><br><span class="line"></span><br><span class="line">        fields = c1.getDeclaredFields();<span class="comment">//找到全部的属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定属性的值</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取类的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line">        Method[] methods = c1.getMethods();<span class="comment">//获得本类及其父类的全部public</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正常的：&quot;</span>+method);</span><br><span class="line">        &#125;</span><br><span class="line">        methods = c1.getDeclaredMethods();<span class="comment">//获取本类的所有方法</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;getDeclaredMethods：&quot;</span>+method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line">        <span class="comment">//获得指定的方法</span></span><br><span class="line">        <span class="comment">//重载</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;getName&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> c1.getMethod(<span class="string">&quot;setName&quot;</span>,String.class);</span><br><span class="line">        System.out.println(getName);</span><br><span class="line">        System.out.println(setName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类的构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line">        Constructor[] constructors = c1.getConstructors();<span class="comment">//获得类中的public方法</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        constructors = c1.getDeclaredConstructors();<span class="comment">//获得类中的全部方法</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;#&quot;</span>+constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得指定的构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c1.getDeclaredConstructor(String.class, <span class="type">int</span>.class,<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;指定的：&quot;</span>+declaredConstructor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><hr><h3 id="2-9、动态创建对象执行方法"><a href="#2-9、动态创建对象执行方法" class="headerlink" title="2.9、动态创建对象执行方法"></a>2.9、动态创建对象执行方法</h3><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314215028746-1292649956.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态的创建对象，通过反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;注解与反射.reflection.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造一个对象</span></span><br><span class="line"><span class="comment">//        User user = (User) c1.newInstance();//本质是调用了类的无参构造器</span></span><br><span class="line"><span class="comment">//        System.out.println(user);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过构造器创建对象</span></span><br><span class="line"><span class="comment">//        Constructor constructor = c1.getDeclaredConstructor(String.class, int.class, int.class);</span></span><br><span class="line"><span class="comment">//        User user2 = (User) constructor.newInstance(&quot;张三&quot;, 001, 16);</span></span><br><span class="line"><span class="comment">//        System.out.println(user2);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射调用普通方法</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> (User) c1.newInstance();</span><br><span class="line">        <span class="comment">//通过反射获取一个方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//invoke：激活</span></span><br><span class="line">        <span class="comment">//（对象,&quot;方法的值&quot;）</span></span><br><span class="line">        setName.invoke(user3,<span class="string">&quot;Devin&quot;</span>);</span><br><span class="line">        System.out.println(user3.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射操作属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;==========================&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> (User) c1.newInstance();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//不能直接操作私有属性，我们需要关闭程序安全检测，属性或者方法setAccessible(true)</span></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);<span class="comment">//</span></span><br><span class="line">        name.set(user4,<span class="string">&quot;Devin2&quot;</span>);</span><br><span class="line">        System.out.println(user4.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-10、性能对比分析"><a href="#2-10、性能对比分析" class="headerlink" title="2.10、性能对比分析"></a>2.10、性能对比分析</h3><p><img src="http://qnimg.xblog1.top/typora/image-20240228215615939.png" alt="image-20240228215615939"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分析性能问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test10</span> &#123;</span><br><span class="line">    <span class="comment">//通过普通方式调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            user.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;普通方法执行10亿次:&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射方式调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> user1.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user1,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式执行10亿次:&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反射方式调用，关闭检测</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> user3.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        getName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user3,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式调用，关闭检测执行10亿次:&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        test01();</span><br><span class="line">        test02();</span><br><span class="line">        test03();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-11、获取泛型信息"><a href="#2-11、获取泛型信息" class="headerlink" title="2.11、获取泛型信息"></a>2.11、获取泛型信息</h3><p><strong>反射操作泛型</strong></p><p><img src="http://qnimg.xblog1.top/typora/2631276-20220314215047982-754296210.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过反射获取泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test11</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">(Map&lt;String,User&gt; map, List&lt;User&gt; list)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,User&gt; <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test02&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> Test11.class.getMethod(<span class="string">&quot;test01&quot;</span>, Map.class, List.class);</span><br><span class="line"></span><br><span class="line">        Type[] genericParameterTypes = method.getGenericParameterTypes();</span><br><span class="line">        <span class="keyword">for</span> (Type genericParameterType : genericParameterTypes) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;#&quot;</span>+genericParameterType);</span><br><span class="line">            <span class="keyword">if</span> (genericParameterType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">                Type[] actualTypeArguments = ((ParameterizedType) genericParameterType).getActualTypeArguments();</span><br><span class="line">                <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                    System.out.println(actualTypeArgument);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        method = Test11.class.getMethod(<span class="string">&quot;test02&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericReturnType</span> <span class="operator">=</span> method.getGenericReturnType();</span><br><span class="line">        <span class="keyword">if</span> (genericReturnType <span class="keyword">instanceof</span> ParameterizedType)&#123;</span><br><span class="line">            Type[] actualTypeArguments = ((ParameterizedType) genericReturnType).getActualTypeArguments();</span><br><span class="line">            <span class="keyword">for</span> (Type actualTypeArgument : actualTypeArguments) &#123;</span><br><span class="line">                System.out.println(actualTypeArgument);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-12、获取注解信息"><a href="#2-12、获取注解信息" class="headerlink" title="2.12、获取注解信息"></a>2.12、获取注解信息</h3><p><strong>反射操作注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//练习反射操作注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;注解与反射.reflection.Student2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射获得注解</span></span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation annotation : annotations) &#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得注解value的值</span></span><br><span class="line">        <span class="type">TableDevin</span> <span class="variable">tableDevin</span> <span class="operator">=</span> (TableDevin) c1.getAnnotation(TableDevin.class);</span><br><span class="line">        System.out.println(tableDevin.value());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得类指定的注解</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">FileDevin</span> <span class="variable">annotation</span> <span class="operator">=</span> f.getAnnotation(FileDevin.class);</span><br><span class="line">        System.out.println(annotation.columnName());</span><br><span class="line">        System.out.println(annotation.type());</span><br><span class="line">        System.out.println(annotation.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableDevin(&quot;db_student&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student2</span>&#123;</span><br><span class="line">    <span class="meta">@FileDevin(columnName = &quot;db_id&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="meta">@FileDevin(columnName = &quot;db_age&quot;,type = &quot;int&quot;,length = 10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@FileDevin(columnName = &quot;db_name&quot;,type = &quot;Varchar&quot;,length = 3)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student2</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student2&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类名的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> TableDevin&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性的注解</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> FileDevin&#123;</span><br><span class="line">    String <span class="title function_">columnName</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 注解 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实验3</title>
      <link href="/2023/12/19/python%E5%AE%9E%E9%AA%8C3/"/>
      <url>/2023/12/19/python%E5%AE%9E%E9%AA%8C3/</url>
      
        <content type="html"><![CDATA[<h3 id="使用pytorch框架手写数字识别"><a href="#使用pytorch框架手写数字识别" class="headerlink" title="使用pytorch框架手写数字识别"></a>使用pytorch框架手写数字识别</h3><p>用mnist数据集训练一个手写数字图片识别的神经网络。</p><p>该神经网络使用了三层cnn卷积神经网络和两层全连接构建神经网络，并使用了一层Dropout防止过拟合。神经网络使用pytorch框架搭建，并调用gpu提高运算速度，最终模型保存于custom_cnn_model.pth中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision.datasets <span class="keyword">import</span> MNIST</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查GPU是否可用</span></span><br><span class="line">device = torch.device(<span class="string">&#x27;cuda&#x27;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&#x27;cpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义CNN模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomCNN</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(CustomCNN, self).__init__()</span><br><span class="line">        <span class="comment">#使用3个卷积层和3个池化层构建CNN模型</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">32</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.relu1 = nn.ReLU()</span><br><span class="line">        self.pool1 = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">32</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.relu2 = nn.ReLU()</span><br><span class="line">        self.pool2 = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.conv3 = nn.Conv2d(<span class="number">64</span>, <span class="number">128</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.relu3 = nn.ReLU()</span><br><span class="line">        self.pool3 = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.flatten = nn.Flatten()<span class="comment"># 将多维张量展平为一维张量</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">128</span> * <span class="number">3</span> * <span class="number">3</span>, <span class="number">512</span>)<span class="comment"># 全连接层</span></span><br><span class="line">        self.relu4 = nn.ReLU()</span><br><span class="line">        self.dropout = nn.Dropout(<span class="number">0.5</span>)  <span class="comment"># 添加Dropout</span></span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">512</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.pool1(self.relu1(self.conv1(x)))</span><br><span class="line">        x = self.pool2(self.relu2(self.conv2(x)))</span><br><span class="line">        x = self.pool3(self.relu3(self.conv3(x)))</span><br><span class="line">        x = self.flatten(x)</span><br><span class="line">        x = self.relu4(self.fc1(x))</span><br><span class="line">        x = self.dropout(x)</span><br><span class="line">        x = self.fc2(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置训练参数</span></span><br><span class="line">batch_size = <span class="number">64</span></span><br><span class="line">learning_rate = <span class="number">0.001</span></span><br><span class="line">epochs = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载MNIST数据集</span></span><br><span class="line">transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((<span class="number">0.5</span>,), (<span class="number">0.5</span>,))])</span><br><span class="line">train_dataset = MNIST(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>, transform=transform)</span><br><span class="line">test_dataset = MNIST(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>, transform=transform)</span><br><span class="line"></span><br><span class="line">train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(dataset=test_dataset, batch_size=batch_size, shuffle=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化模型、损失函数和优化器，并将它们移动到GPU上</span></span><br><span class="line">model = CustomCNN().to(device)</span><br><span class="line">criterion = nn.CrossEntropyLoss()<span class="comment"># 交叉熵损失函数</span></span><br><span class="line">optimizer = optim.Adam(model.parameters(), lr=learning_rate)<span class="comment"># Adam优化器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录训练和测试集的损失值</span></span><br><span class="line">train_loss_values = []</span><br><span class="line">test_loss_values = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练模型</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    model.train()</span><br><span class="line">    total_train_loss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, (images, labels) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        images, labels = images.to(device), labels.to(device)<span class="comment"># 将数据移动到GPU上</span></span><br><span class="line"></span><br><span class="line">        optimizer.zero_grad()<span class="comment"># 梯度清零</span></span><br><span class="line">        outputs = model(images)<span class="comment"># 前向传播</span></span><br><span class="line">        loss = criterion(outputs, labels)<span class="comment"># 计算损失</span></span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_loss += loss.item()<span class="comment"># 累加损失值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算平均训练集损失</span></span><br><span class="line">    average_train_loss = total_train_loss / <span class="built_in">len</span>(train_loader)</span><br><span class="line">    train_loss_values.append(average_train_loss)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在每个epoch结束时计算测试集损失</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    total_test_loss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> images, labels <span class="keyword">in</span> test_loader:</span><br><span class="line">            images, labels = images.to(device), labels.to(device)</span><br><span class="line">            outputs = model(images)</span><br><span class="line">            loss = criterion(outputs, labels)</span><br><span class="line">            total_test_loss += loss.item()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算平均测试集损失</span></span><br><span class="line">    average_test_loss = total_test_loss / <span class="built_in">len</span>(test_loader)</span><br><span class="line">    test_loss_values.append(average_test_loss)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Epoch [&#123;&#125;/&#123;&#125;], Train Loss: &#123;:.4f&#125;, Test Loss: &#123;:.4f&#125;&#x27;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>, epochs, average_train_loss, average_test_loss))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制损失函数变化折线图</span></span><br><span class="line">plt.plot(train_loss_values, label=<span class="string">&#x27;Train Loss&#x27;</span>)</span><br><span class="line">plt.plot(test_loss_values, label=<span class="string">&#x27;Test Loss&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epoch&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Train and Test Loss Curve&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存模型</span></span><br><span class="line">torch.save(model.state_dict(), <span class="string">&#x27;custom_cnn_model.pth&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行截图：</p><p><img src="http://qnimg.xblog1.top/typora/image-20231219160241161.png" alt="image-20231219160241161"></p><p>每个epoch后训练集和测试集的损失函数值：</p><p><img src="http://qnimg.xblog1.top/typora/image-20231219160524124.png" alt="image-20231219160524124"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实验2</title>
      <link href="/2023/12/11/python%E5%AE%9E%E9%AA%8C2/"/>
      <url>/2023/12/11/python%E5%AE%9E%E9%AA%8C2/</url>
      
        <content type="html"><![CDATA[<h5 id="python网络爬虫："><a href="#python网络爬虫：" class="headerlink" title="python网络爬虫："></a>python网络爬虫：</h5><p>使用python编写爬虫，爬取起点中文网主页的所有小说信息,并保存到excel表格中</p><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p>起点中文网主页连接</p><p><a href="https://www.qidian.com/all/page1/">https://www.qidian.com/all/page1/</a></p><p>爬取范围为 <code>page1</code> 到<code>page5</code> </p><p>查看网页源代码可知，小说信息位于 <code>&lt;ul class=&quot;all-img-list cf&quot;&gt;</code>标签下</p><p><img src="http://qnimg.xblog1.top/typora/image-20231211131421301.png" alt="image-20231211131421301"></p><p>单个小说代码：</p><p><img src="http://qnimg.xblog1.top/typora/image-20231211131534452.png" alt="image-20231211131534452"></p><p>代码实现方法：</p><p>遍历五个页面，使用<code>xpath</code>获取每个页面的<code>&lt;ul class=&quot;all-img-list cf&quot;&gt;</code>的所有数据</p><p>然后在遍历<code>&lt;ul&gt;</code>中的每一个<code>&lt;li&gt;</code>（即单本小说），匹配获取相关信息</p><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line">all_info_list=[]</span><br><span class="line">index=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">url,index</span>):</span><br><span class="line">    <span class="comment"># print(url)</span></span><br><span class="line">    html=requests.get(url)</span><br><span class="line">    <span class="comment"># print(html.text)</span></span><br><span class="line">    selector =etree.HTML(html.text)</span><br><span class="line">    <span class="comment"># 匹配&lt;ul&gt;标签</span></span><br><span class="line">    infos=selector.xpath(<span class="string">&#x27;//ul[@class=&quot;all-img-list cf&quot;]/li&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(infos)</span></span><br><span class="line">    <span class="keyword">for</span> info <span class="keyword">in</span> infos:</span><br><span class="line">        title=info.xpath(<span class="string">&#x27;div[2]/h2/a/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#小说主页跳转链接</span></span><br><span class="line">        link=info.xpath(<span class="string">&#x27;div[2]/h2/a/@href&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment">#添加访问协议</span></span><br><span class="line">        link=<span class="string">&#x27;https:&#x27;</span>+link</span><br><span class="line">        <span class="comment"># print(link)</span></span><br><span class="line">        autor=info.xpath(<span class="string">&#x27;div[2]/p[1]/a[1]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        type1=info.xpath(<span class="string">&#x27;div[2]/p[1]/a[2]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        type2=info.xpath(<span class="string">&#x27;div[2]/p[1]/a[3]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        tag=type1+<span class="string">&#x27;.&#x27;</span>+type2</span><br><span class="line">        complete=info.xpath(<span class="string">&#x27;div[2]/p[1]/span/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        introduce=info.xpath(<span class="string">&#x27;div[2]/p[2]/text()&#x27;</span>)[<span class="number">0</span>].strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#从小说详情页面获取小说字数</span></span><br><span class="line">        html1=requests.get(link)</span><br><span class="line">        <span class="comment"># print(html1.text)</span></span><br><span class="line">        selector1=etree.HTML(html1.text)</span><br><span class="line">        info1=selector1.xpath(<span class="string">&#x27;//p[@class=&quot;count&quot;]/em/text()&#x27;</span>)[<span class="number">0</span>]+<span class="string">&#x27;字&#x27;</span></span><br><span class="line">        <span class="comment"># print(info1)</span></span><br><span class="line">        word=info1</span><br><span class="line"></span><br><span class="line">        <span class="comment">#最新更新章节</span></span><br><span class="line">        new=info.xpath(<span class="string">&#x27;div[2]/p[3]/span/a/text()&#x27;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        info_list=[title,link,autor,tag,complete,introduce,word,new]</span><br><span class="line">        <span class="comment"># print(info_list)</span></span><br><span class="line">        all_info_list.append(info_list)</span><br><span class="line">        <span class="comment"># time.sleep(1)</span></span><br><span class="line">        <span class="comment"># 进度条</span></span><br><span class="line">        index +=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\r&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Progress: &#123;&#125;%: [&quot;</span>.<span class="built_in">format</span>(index), <span class="string">&quot;=&quot;</span> * (index-<span class="number">1</span>),<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot; &quot;</span>*(<span class="number">100</span>-index),<span class="string">&quot;]&quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 主页链接</span></span><br><span class="line">    urls=[<span class="string">&#x27;https://www.qidian.com/all/page&#x27;</span>+<span class="built_in">str</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>)]</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        get(url,index)</span><br><span class="line">        index+=<span class="number">20</span><span class="comment"># 计数</span></span><br><span class="line">    <span class="comment"># excel表头</span></span><br><span class="line">    header=[<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;link&#x27;</span>,<span class="string">&#x27;autor&#x27;</span>,<span class="string">&#x27;tag&#x27;</span>,<span class="string">&#x27;complete&#x27;</span>,<span class="string">&#x27;intorduce&#x27;</span>,<span class="string">&#x27;word&#x27;</span>,<span class="string">&#x27;new&#x27;</span>]</span><br><span class="line">    <span class="comment">#创建表格</span></span><br><span class="line">    book=xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    sheet = book.add_sheet(<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(header)):</span><br><span class="line">        <span class="comment"># 写入表头</span></span><br><span class="line">        sheet.write(<span class="number">0</span>, h, header[h])</span><br><span class="line"></span><br><span class="line">    i = <span class="number">1</span>  <span class="comment"># 行数</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">list</span> <span class="keyword">in</span> all_info_list:</span><br><span class="line">        j = <span class="number">0</span>  <span class="comment"># 列数</span></span><br><span class="line">        <span class="comment"># 写入爬虫数据</span></span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">            sheet.write(i, j, data)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 保存文件</span></span><br><span class="line">    book.save(<span class="string">&#x27;xiaoshuo.xls&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行截图：</p><p><img src="http://qnimg.xblog1.top/typora/image-20231211135143638.png" alt="image-20231211135143638"></p><p>最终输出的excel表格：</p><p><img src="http://qnimg.xblog1.top/typora/image-20231211135837078.png" alt="image-20231211135837078"></p><p>共计101行</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实验1</title>
      <link href="/2023/12/11/python%E5%AE%9E%E9%AA%8C1/"/>
      <url>/2023/12/11/python%E5%AE%9E%E9%AA%8C1/</url>
      
        <content type="html"><![CDATA[<h3 id="项目一：分析销售数据"><a href="#项目一：分析销售数据" class="headerlink" title="项目一：分析销售数据"></a>项目一：分析销售数据</h3><h5 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h5><p>假设你是一家电子产品零售公司的数据分析师。公司提供了一份包含销售数据的CSV文件， 文件名为<code>sales_data.csv</code>。数据包括产品 ID、销售日期、销售数量、销售金额等信息。你的 任务是使用 Python 中的 NumPy、Pandas 和 Matplotlib 库进行数据分析和可视化，以回答 </p><p>以下问题：</p><ol><li><p>读取 sales_data1.csv 文件并将数据存储在一个 Pandas DataFrame 中。 </p></li><li><p>计算每个产品的总销售数量和总销售金额。 </p></li><li><p>找出销售数量最高的前 5 个产品，并绘制它们的销售数量的条形图。 </p></li><li><p>计算每个月的总销售金额，并绘制一个折线图展示月度销售趋势。</p></li></ol><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p>使用numpy，pandas对数据进行处理，然后使用matplotlib进行绘图，实现数据可视化</p><h5 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取文件</span></span><br><span class="line">df =pd.read_csv(<span class="string">&#x27;sales_data1.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># 2. 计算每个产品的总销售数量和总销售金额</span></span><br><span class="line">product_sales = df.groupby(<span class="string">&#x27;ProductID&#x27;</span>).agg(&#123;<span class="string">&#x27;Quantity&#x27;</span>: <span class="string">&#x27;sum&#x27;</span>, <span class="string">&#x27;Amount&#x27;</span>: <span class="string">&#x27;sum&#x27;</span>&#125;).reset_index()</span><br><span class="line"><span class="comment"># print(product_sales)</span></span><br><span class="line"><span class="comment"># 3. 找出销售数量最高的前 5 个产品，并绘制销售数量的条形图</span></span><br><span class="line">top_products = product_sales.nlargest(<span class="number">5</span>, <span class="string">&#x27;Quantity&#x27;</span>)</span><br><span class="line">plt.bar(top_products[<span class="string">&#x27;ProductID&#x27;</span>], top_products[<span class="string">&#x27;Quantity&#x27;</span>])</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Product ID&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Total Sales Quantity&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Top 5 Products by Sales Quantity&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 计算每个月的总销售金额，并绘制一个折线图展示月度销售趋势</span></span><br><span class="line">df[<span class="string">&#x27;SalesMonth&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;SalesDate&#x27;</span>]).dt.to_period(<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">monthly_sales = df.groupby(<span class="string">&#x27;SalesMonth&#x27;</span>)[<span class="string">&#x27;Amount&#x27;</span>].<span class="built_in">sum</span>().reset_index()</span><br><span class="line">plt.plot(monthly_sales.index,monthly_sales[<span class="string">&#x27;Amount&#x27;</span>])</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Month&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Total Sales Amount&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Monthly Sales Trend&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h5 id="执行结果："><a href="#执行结果：" class="headerlink" title="执行结果："></a>执行结果：</h5><p>销售数量条形图：</p><p><img src="http://qnimg.xblog1.top/typora/image-20231211125424963.png" alt="image-20231211125424963"></p><p>月度销售趋势</p><p><img src="http://qnimg.xblog1.top/typora/image-20231211125446025.png" alt="image-20231211125446025"></p><h3 id="项目一：分析销售数据（进阶版）"><a href="#项目一：分析销售数据（进阶版）" class="headerlink" title="项目一：分析销售数据（进阶版）"></a>项目一：分析销售数据（进阶版）</h3><h5 id="项目目标："><a href="#项目目标：" class="headerlink" title="项目目标："></a>项目目标：</h5><p>项目步骤：</p><ol><li><p>数据准备： - 提供了一个虚拟的销售数据的 csv 文件。 </p></li><li><p>数据加载与清理： - 使用 Pandas 加载 CSV 文件。 - 清理数据，处理缺失值、异常值等。 </p></li><li><p>基本统计分析： - 使用 Numpy 和 Pandas 进行基本的统计分析，如总销售额、平均销售数量等。 </p></li><li><p>销售趋势分析： - 利用 Matplotlib 绘制销售趋势图，展示销售随时间的变化。 </p></li><li><p>产品分析： - 利用 Pandas 和 Numpy 找出最畅销的产品，最畅销的地区等。 - 利用 Matplotlib 绘制产品销售排行榜。</p></li><li><p>地区分析： - 使用 Matplotlib 绘制销售地区的分布图，了解销售的地域差异。 </p></li><li><p>高级统计分析（可选）： - 利用 Scipy 进行更高级的统计分析，如假设检验、回归分析等。</p></li></ol><h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取文件</span></span><br><span class="line">df=pd.read_csv(<span class="string">&#x27;sales_data2.csv&#x27;</span>)</span><br><span class="line">df.dropna(inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 3. 基本统计分析</span></span><br><span class="line">total_sales = df[<span class="string">&#x27;SalesQuantity&#x27;</span>] * df[<span class="string">&#x27;SalesPrice&#x27;</span>]</span><br><span class="line">average_sales_quantity = df[<span class="string">&#x27;SalesQuantity&#x27;</span>].mean()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Total Sales: <span class="subst">&#123;total_sales.<span class="built_in">sum</span>()&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Average Sales Quantity: <span class="subst">&#123;average_sales_quantity&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 4. 销售趋势分析</span></span><br><span class="line">df[<span class="string">&#x27;SalesDate&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;SalesDate&#x27;</span>])</span><br><span class="line">df.set_index(<span class="string">&#x27;SalesDate&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">df.resample(<span class="string">&#x27;M&#x27;</span>).<span class="built_in">sum</span>()[<span class="string">&#x27;SalesQuantity&#x27;</span>].plot()</span><br><span class="line">plt.title(<span class="string">&#x27;Sales Trend Over Time&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Month&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Sales Quantity&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#5. 产品分析</span></span><br><span class="line"><span class="comment"># 最畅销产品和最畅销地区</span></span><br><span class="line">best_selling_product = df.groupby(<span class="string">&#x27;ProductID&#x27;</span>)[<span class="string">&#x27;SalesQuantity&#x27;</span>].<span class="built_in">sum</span>().idxmax()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Best Selling Product: <span class="subst">&#123;best_selling_product&#125;</span>&#x27;</span>)</span><br><span class="line">best_selling_Region=df.groupby(<span class="string">&#x27;Region&#x27;</span>)[<span class="string">&#x27;SalesQuantity&#x27;</span>].<span class="built_in">sum</span>().idxmax()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Best Selling Region: <span class="subst">&#123;best_selling_Region&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># 产品销售排行榜</span></span><br><span class="line">product_ranking =df.groupby(<span class="string">&#x27;ProductID&#x27;</span>)[<span class="string">&#x27;SalesQuantity&#x27;</span>].<span class="built_in">sum</span>().sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">product_ranking.plot(kind=<span class="string">&#x27;bar&#x27;</span>, rot=<span class="number">0</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Product Sales Ranking&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Product ID&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Sales Quantity&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 6. 地区分析</span></span><br><span class="line"><span class="comment"># 销售地区分布图</span></span><br><span class="line">region_distribution = df[<span class="string">&#x27;Region&#x27;</span>].value_counts()</span><br><span class="line">region_distribution.plot(kind=<span class="string">&#x27;pie&#x27;</span>, autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Sales Distribution by Region&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h5 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h5><p>总销售额、平均销售数量，最畅销的产品，最畅销的地区</p><p><img src="http://qnimg.xblog1.top/typora/image-20231211125949582.png" alt="image-20231211125949582"></p><p>   销售趋势分析：</p><p><img src="http://qnimg.xblog1.top/typora/image-20231211130118986.png" alt="image-20231211130118986"></p><p>产品销量排行榜：</p><p><img src="http://qnimg.xblog1.top/typora/image-20231211130211333.png" alt="image-20231211130211333"><br>销售地区分布图：</p><p><img src="http://qnimg.xblog1.top/typora/image-20231211130255372.png" alt="image-20231211130255372"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载功能测试</title>
      <link href="/2023/11/23/test/"/>
      <url>/2023/11/23/test/</url>
      
        <content type="html"><![CDATA[<p><a href="/download/test.js">test</a></p><p> <a href="/download/test.js" download>test</a></p><p><a href="https://github.xblog1.top/download/test.js">点击下载</a></p><p><a href="/download/test.apk">点击下载</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python作业08</title>
      <link href="/2023/11/22/python-homework08/"/>
      <url>/2023/11/22/python-homework08/</url>
      
        <content type="html"><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>求取指定函数极值</p><p>分析：minimize_scalar()可以返回函数的极大值和极小值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize_scalar</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> -math.sin(<span class="number">2</span>*(x-<span class="number">2</span>))*<span class="built_in">pow</span>(math.e,-<span class="built_in">pow</span>(x,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(minimize_scalar(fun))</span><br></pre></td></tr></table></figure><p><img src="https://qnimg.xblog1.top/typora/image-20231122162844289.png" alt="image-20231122162844289"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>用Numpy求取鸢尾花数据的统计值； </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data=pd.read_csv(<span class="string">&quot;iris_sepal_length.csv&quot;</span>,header=<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">list</span>=data.values.tolist()</span><br><span class="line"><span class="built_in">list</span>=np.sort(<span class="built_in">list</span>,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">list</span>=np.unique(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(<span class="built_in">list</span>))</span><br><span class="line"><span class="built_in">print</span>(np.cumsum(<span class="built_in">list</span>))</span><br><span class="line"><span class="built_in">print</span>(np.mean(<span class="built_in">list</span>))</span><br><span class="line"><span class="built_in">print</span>(np.std(<span class="built_in">list</span>))</span><br><span class="line"><span class="built_in">print</span>(np.var(<span class="built_in">list</span>))</span><br><span class="line"><span class="built_in">print</span>(np.amin(<span class="built_in">list</span>))</span><br><span class="line"><span class="built_in">print</span>(np.amax(<span class="built_in">list</span>))</span><br></pre></td></tr></table></figure><p><img src="https://qnimg.xblog1.top/typora/image-20231122163028086.png" alt="image-20231122163028086"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>对右侧所示的两个字典完成以下操作：</p><p> 1、合并两个数据框，并处理缺失值。</p><p> 2、填充缺失值。 </p><p>3、计算总分列，并创建一个最终的数据框。 </p><p>4、删除多余的列，并对列进行重命名。 提示： 可以使用outer join处理缺失值，使用fillna填充缺失值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 创建第一个数据框</span></span><br><span class="line">data1 = &#123;</span><br><span class="line"> <span class="string">&#x27;ID&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line"> <span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>, <span class="string">&#x27;David&#x27;</span>],</span><br><span class="line"> <span class="string">&#x27;Score&#x27;</span>: [<span class="number">85</span>, <span class="number">90</span>, <span class="number">78</span>, <span class="number">92</span>] &#125;</span><br><span class="line">df1 = pd.DataFrame(data1)</span><br><span class="line"><span class="comment"># 创建第二个数据框，其中包含缺失值</span></span><br><span class="line">data2 = &#123;</span><br><span class="line"> <span class="string">&#x27;ID&#x27;</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line"> <span class="string">&#x27;Name&#x27;</span>: [<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Charlie&#x27;</span>, <span class="string">&#x27;Eva&#x27;</span>, <span class="string">&#x27;Frank&#x27;</span>],</span><br><span class="line"> <span class="string">&#x27;Score&#x27;</span>: [<span class="number">90</span>, <span class="number">78</span>, <span class="number">88</span>, <span class="number">76</span>] &#125;</span><br><span class="line">df2 = pd.DataFrame(data2)</span><br><span class="line">df3=pd.merge(df1,df2,how=<span class="string">&#x27;outer&#x27;</span>).set_index(<span class="string">&#x27;ID&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df3)</span><br></pre></td></tr></table></figure><p><img src="https://qnimg.xblog1.top/typora/image-20231122163157728.png" alt="image-20231122163157728"></p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>右侧是某航班的的乘客数据 1.分析年度乘客总量变化情况（折线图） 2.分析乘客在一年中各月份的分布（柱状图）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> scipy</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data1=&#123;</span><br><span class="line">    <span class="string">&#x27;year&#x27;</span>:[<span class="number">1949</span>,<span class="number">1950</span>,<span class="number">1951</span>,<span class="number">1952</span>,<span class="number">1953</span>,<span class="number">1954</span>,<span class="number">1955</span>,<span class="number">1956</span>,<span class="number">1957</span>,<span class="number">1958</span>,<span class="number">1959</span>,<span class="number">1960</span>],</span><br><span class="line">    <span class="string">&#x27;passengers&#x27;</span>:[ <span class="number">1520</span>,<span class="number">1676</span>,<span class="number">2042</span>,<span class="number">2364</span>,<span class="number">2700</span>,<span class="number">2867</span>,<span class="number">3408</span>,<span class="number">3939</span>,<span class="number">4421</span>,<span class="number">4572</span>,<span class="number">5140</span>,<span class="number">5714</span>]</span><br><span class="line">&#125;</span><br><span class="line">data2=&#123;</span><br><span class="line">    <span class="string">&#x27;month&#x27;</span>:[<span class="string">&#x27;January&#x27;</span>,<span class="string">&#x27;February&#x27;</span>,<span class="string">&#x27;March&#x27;</span>,<span class="string">&#x27;April&#x27;</span>,<span class="string">&#x27;May&#x27;</span>,<span class="string">&#x27;June&#x27;</span>,<span class="string">&#x27;July&#x27;</span>,<span class="string">&#x27;August&#x27;</span>,<span class="string">&#x27;September&#x27;</span>,<span class="string">&#x27;October&#x27;</span>,<span class="string">&#x27;November&#x27;</span>,<span class="string">&#x27;December&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;passengers&#x27;</span>:[<span class="number">2901</span>,<span class="number">2820</span>,<span class="number">3242</span>,<span class="number">3205</span>,<span class="number">3262</span>,<span class="number">3740</span>,<span class="number">4216</span>,<span class="number">4213</span>,<span class="number">3629</span>,<span class="number">3199</span>,<span class="number">2794</span>,<span class="number">3142</span>]</span><br><span class="line">&#125;</span><br><span class="line">dp1=pd.DataFrame(data1).set_index(<span class="string">&#x27;year&#x27;</span>)</span><br><span class="line">dp2=pd.DataFrame(data2).set_index(<span class="string">&#x27;month&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dp1.plot.line()</span><br><span class="line">dp2.plot.barh()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://qnimg.xblog1.top/typora/image-20231122165417594.png" alt="image-20231122165417594"></p><p><img src="https://qnimg.xblog1.top/typora/image-20231122165430139.png" alt="image-20231122165430139"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python作业07</title>
      <link href="/2023/10/19/python-homework07/"/>
      <url>/2023/10/19/python-homework07/</url>
      
        <content type="html"><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>打印输出numpy的版本和配置信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印NumPy版本</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;NumPy 版本:&quot;</span>, np.__version__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印NumPy配置信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;NumPy 配置:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.show_config())</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019130033173.png" alt="image-20231019130033173"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>创建一个长度为10的空向量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">n = np.zeros(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019130124311.png" alt="image-20231019130124311"></p><p>np.zeros(n) 创建一个长度为n全为0的一维数组</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>查阅数组的内存大小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">n = np.zeros(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(n.size)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019130246789.png" alt="image-20231019130246789"></p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>反转一个向量(第一个元素变为最后一个)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">n = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(n[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019130349569.png" alt="image-20231019130349569"></p><p>n[::-1]表示步长为-1，即逆序输出</p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>创建一个 10x10 的随机数组并找到它的最大值和最小值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">n = np.random.randn(<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the min number is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(n.<span class="built_in">min</span>()))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;the max number is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(n.<span class="built_in">max</span>()))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019130956239.png" alt="image-20231019130956239"></p><p>np.random.randn(10,10)生成一个10x10的具有正态分布的二维数组</p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p>对一个5x5的随机矩阵做归一化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">n =np.random.randn(<span class="number">5</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>((n-n.<span class="built_in">min</span>())/(n.<span class="built_in">max</span>()-n.<span class="built_in">min</span>()))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019131456227.png" alt="image-20231019131456227"></p><p>归一化一般是将数据映射到指定的范围，用于去除不同维度数据的量纲以及量纲单位。</p><p>常见的映射范围有 [0, 1] 和 [-1, 1] ，最常见的归一化方法就是 Min-Max 归一化。</p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>用5种不同的方法提取随机数组中的整数部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">Z = np.random.uniform(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> (Z - Z % <span class="number">1</span>) <span class="comment">#减去数字的小数部分</span></span><br><span class="line"><span class="built_in">print</span> (np.floor(Z)) <span class="comment"># 返回不大于输入参数的最大整数。（向下取整）</span></span><br><span class="line"><span class="built_in">print</span> (np.ceil(Z)-<span class="number">1</span>) <span class="comment"># np.ceil() : 计算各元素的ceiling，对元素向上取整。</span></span><br><span class="line"><span class="built_in">print</span> (Z.astype(<span class="built_in">int</span>)) <span class="comment"># 将Z的数据类型转换为int</span></span><br><span class="line"><span class="built_in">print</span> (np.trunc(Z)) <span class="comment"># 截取整数部分</span></span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019132328957.png" alt="image-20231019132328957"></p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p>创建一个大小为10的随机向量，并把它排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">z =np.random.random(<span class="number">10</span>)</span><br><span class="line">z.sort() </span><br><span class="line"><span class="built_in">print</span>(z)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019132420505.png" alt="image-20231019132420505"></p><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p>将一个10x2的笛卡尔坐标矩阵转换为极坐标 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">z = np.random.random((<span class="number">10</span>,<span class="number">2</span>))</span><br><span class="line">x,y=z[:,<span class="number">0</span>],z[:,<span class="number">1</span>]</span><br><span class="line">r=np.sqrt(x**<span class="number">2</span>+y**<span class="number">2</span>)</span><br><span class="line">t=np.arctan2(y,x)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019133242392.png" alt="image-20231019133242392"></p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p>创建一个大小为10的随机向量并且将该向量中最大的值替换为0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">Z = np.random.random(<span class="number">10</span>)</span><br><span class="line">Z[Z.argmax()] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(Z)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019133721208.png" alt="image-20231019133721208"></p><p><a href="https://so.csdn.net/so/search?q=numpy&spm=1001.2101.3001.7020">numpy</a>.argmax(a, axis&#x3D;None, out&#x3D;None)<br>返回沿轴<a href="https://so.csdn.net/so/search?q=axis&spm=1001.2101.3001.7020">axis</a>最大值的索引。</p><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p>创建一个结构化数组，其中x和y坐标覆盖[0, 1]x[1, 0]区域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">Z = np.zeros((<span class="number">5</span>, <span class="number">5</span>), [(<span class="string">&#x27;x&#x27;</span>, <span class="built_in">float</span>), (<span class="string">&#x27;y&#x27;</span>, <span class="built_in">float</span>)])</span><br><span class="line">Z[<span class="string">&#x27;x&#x27;</span>], Z[<span class="string">&#x27;y&#x27;</span>] = np.meshgrid(np.linspace(<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>), np.linspace(<span class="number">0</span>,<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span> (Z)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019133828899.png" alt="image-20231019133828899"></p><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><p>给定两个数组X和Y，构造柯西(Cauchy)矩阵C ()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">X = np.arange(<span class="number">8</span>)</span><br><span class="line">Y = X + <span class="number">0.5</span></span><br><span class="line">C = <span class="number">1.0</span> / np.subtract.outer(X, Y)</span><br><span class="line"><span class="built_in">print</span> (C)</span><br><span class="line"><span class="built_in">print</span>(np.linalg.det(C))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019134122412.png" alt="image-20231019134122412"></p><h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><p>(100, 2)的随机向量，求出点与点之间的距离</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">Z = np.random.random((<span class="number">100</span>, <span class="number">2</span>)) <span class="comment"># 生成一个100x2的随机数组</span></span><br><span class="line">X, Y = np.atleast_2d(Z[:, <span class="number">0</span>], Z[:, <span class="number">1</span>]) <span class="comment"># Z[:,0]表示所有行中第0列，Z[:,1]表示所有行中第一列元素</span></span><br><span class="line">D = np.sqrt((X-X.T)**<span class="number">2</span> + (Y-Y.T)**<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> (D)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019134810335.png" alt="image-20231019134810335"></p><p>numpy.atleast_2d(*arys) 将输入视为具有至少两个维度的数组。</p><h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><p>构造一个二维高斯矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">X, Y = np.meshgrid(np.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>), np.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">D = np.sqrt(X**<span class="number">2</span> + Y**<span class="number">2</span>)</span><br><span class="line">sigma, mu = <span class="number">1.0</span>, <span class="number">0.0</span></span><br><span class="line">G = np.exp(-( (D-mu)**<span class="number">2</span> / (<span class="number">2.0</span>*sigma**<span class="number">2</span>) ))</span><br><span class="line"><span class="built_in">print</span> (G)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019135209835.png" alt="image-20231019135209835"></p><h3 id="15"><a href="#15" class="headerlink" title="15"></a>15</h3><p>给定一个向量，在第二个向量索引的每个元素上加1(注意重复索引)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">Z = np.ones(<span class="number">10</span>)</span><br><span class="line">I = np.random.randint(<span class="number">0</span>,<span class="built_in">len</span>(Z),<span class="number">20</span>)</span><br><span class="line">Z += np.bincount(I, minlength=<span class="built_in">len</span>(Z))<span class="comment">#统计每个数出现的次数，数组最小长度为  len(Z)</span></span><br><span class="line"><span class="built_in">print</span>(Z)</span><br><span class="line">np.add.at(Z, I, <span class="number">1</span>)<span class="comment">#在Z中的第 i位加一</span></span><br><span class="line"><span class="built_in">print</span>(Z)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019140027949.png" alt="image-20231019140027949"></p><h3 id="16"><a href="#16" class="headerlink" title="16"></a>16</h3><p>思考如何求一个四维数组最后两个轴的数据和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">A = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,(<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">#四维随机整数</span></span><br><span class="line"><span class="built_in">sum</span> = A.<span class="built_in">sum</span>(axis=(-<span class="number">2</span>,-<span class="number">1</span>)) <span class="comment"># axis代表第几轴，负数为倒数第i轴</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019140534009.png" alt="image-20231019140534009"></p><h3 id="17"><a href="#17" class="headerlink" title="17"></a>17</h3><p>通过滑动窗口计算一个数组的平均数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">moving_average</span>(<span class="params">a, n=<span class="number">3</span></span>) :</span><br><span class="line">    ret = np.cumsum(a, dtype=<span class="built_in">float</span>)</span><br><span class="line">    ret[n:] = ret[n:] - ret[:-n]</span><br><span class="line">    <span class="keyword">return</span> ret[n - <span class="number">1</span>:]/n</span><br><span class="line">Z = np.arange(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(moving_average(Z, n=<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019140910877.png" alt="image-20231019140910877"></p><h3 id="18"><a href="#18" class="headerlink" title="18"></a>18</h3><p>找出数组中出现频率最高的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">Z = np.random.randint(<span class="number">0</span>,<span class="number">10</span>,<span class="number">50</span>)<span class="comment">#生成50个0~10的随机整数</span></span><br><span class="line"><span class="built_in">print</span> (Z)</span><br><span class="line"><span class="built_in">print</span>(np.bincount(Z).argmax())<span class="comment">#统计数字出现频率，并返回频率最高对应的值</span></span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019144512305.png" alt="image-20231019144512305"></p><h3 id="19"><a href="#19" class="headerlink" title="19"></a>19</h3><p>从一个10x10的矩阵中提取出连续的3x3区块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy.lib <span class="keyword">import</span> stride_tricks</span><br><span class="line">Z = np.random.randint(<span class="number">0</span>,<span class="number">5</span>,(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line">n = <span class="number">3</span></span><br><span class="line">i = <span class="number">1</span> + (Z.shape[<span class="number">0</span>]-<span class="number">3</span>)</span><br><span class="line">j = <span class="number">1</span> + (Z.shape[<span class="number">1</span>]-<span class="number">3</span>)</span><br><span class="line">C = stride_tricks.as_strided(Z, shape=(i, j, n, n),strides=Z.strides + Z.strides)</span><br><span class="line"><span class="built_in">print</span>(C)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019144601915.png" alt="image-20231019144601915"></p><h3 id="20"><a href="#20" class="headerlink" title="20"></a>20</h3><p>利用numpy数组实现Game of life <a href="https://www.zhihu.com/topic/19649581/hot">https://www.zhihu.com/topic/19649581/hot</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">iterate</span>(<span class="params">Z</span>):</span><br><span class="line">    <span class="comment"># Count neighbours</span></span><br><span class="line">    N = (Z[<span class="number">0</span>:-<span class="number">2</span>, <span class="number">0</span>:-<span class="number">2</span>] + Z[<span class="number">0</span>:-<span class="number">2</span>, <span class="number">1</span>:-<span class="number">1</span>] + Z[<span class="number">0</span>:-<span class="number">2</span>, <span class="number">2</span>:] +</span><br><span class="line">         Z[<span class="number">1</span>:-<span class="number">1</span>, <span class="number">0</span>:-<span class="number">2</span>] + Z[<span class="number">1</span>:-<span class="number">1</span>, <span class="number">2</span>:] +</span><br><span class="line">         Z[<span class="number">2</span>:, <span class="number">0</span>:-<span class="number">2</span>] + Z[<span class="number">2</span>:, <span class="number">1</span>:-<span class="number">1</span>] + Z[<span class="number">2</span>:, <span class="number">2</span>:])</span><br><span class="line">    <span class="comment"># Apply rules</span></span><br><span class="line">    birth = (N == <span class="number">3</span>) &amp; (Z[<span class="number">1</span>:-<span class="number">1</span>, <span class="number">1</span>:-<span class="number">1</span>] == <span class="number">0</span>)</span><br><span class="line">    survive = ((N == <span class="number">2</span>) | (N == <span class="number">3</span>)) &amp; (Z[<span class="number">1</span>:-<span class="number">1</span>, <span class="number">1</span>:-<span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">    Z[...] = <span class="number">0</span></span><br><span class="line">    Z[<span class="number">1</span>:-<span class="number">1</span>, <span class="number">1</span>:-<span class="number">1</span>][birth | survive] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> Z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Z = np.random.randint(<span class="number">0</span>, <span class="number">2</span>, (<span class="number">50</span>, <span class="number">50</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>): Z = iterate(Z)</span><br><span class="line"><span class="built_in">print</span>(Z)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019144655921.png" alt="image-20231019144655921"></p><h3 id="21"><a href="#21" class="headerlink" title="21"></a>21</h3><p>用NumPy回归出上海3月份Covid-19阳性病例的趋势 数据参考：<a href="https://blog.csdn.net/huwp001/article/details/123841481">https://blog.csdn.net/huwp001/article/details/123841481</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> polyfit <span class="keyword">as</span> pf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>])</span><br><span class="line">y =np.array([<span class="number">83</span>,<span class="number">65</span>,<span class="number">169</span>,<span class="number">138</span>,<span class="number">202</span>,<span class="number">158</span>,<span class="number">260</span>,<span class="number">374</span>,<span class="number">509</span>,<span class="number">758</span>,<span class="number">896</span>,<span class="number">981</span>,<span class="number">983</span>,<span class="number">1609</span>,<span class="number">2269</span>,<span class="number">2676</span>,<span class="number">3500</span>,<span class="number">4477</span>,<span class="number">5656</span>])</span><br><span class="line"><span class="comment">#本题为求指数回归方程，先取对数求线性回归方程，在求指数回归方程</span></span><br><span class="line"><span class="comment"># y=e^(ax+b)</span></span><br><span class="line"><span class="comment"># log(y)= ax+b</span></span><br><span class="line">log_y=np.log(y)</span><br><span class="line">co=pf(x,log_y,<span class="number">1</span>)<span class="comment"># 求线性回归方程</span></span><br><span class="line">a,b=co[<span class="number">0</span>],co[<span class="number">1</span>]</span><br><span class="line">z = np.exp(b) * np.exp(a * x) <span class="comment">#线性回归方程对应的点求指数后的预测值</span></span><br><span class="line">plt.plot(x, y, <span class="string">&quot;o&quot;</span>)<span class="comment">#散点图</span></span><br><span class="line">plt.plot(x, z)<span class="comment">#拟合曲线</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231019144754326.png" alt="image-20231019144754326"></p><p>对指数回归方程的 <code>y</code> 求对数,转化为线性回归方程，然后使用线性回归方程求出<code>x</code>对应的预测值， 最后使用 matplotlib 库画出回归曲线</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python作业06</title>
      <link href="/2023/10/12/python-homework06/"/>
      <url>/2023/10/12/python-homework06/</url>
      
        <content type="html"><![CDATA[<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>《红楼梦》词频</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">txt = <span class="built_in">open</span> (<span class="string">&quot;红楼梦.txt&quot;</span>,<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;ANSI&quot;</span>).read()</span><br><span class="line">words = jieba.lcut(txt)</span><br><span class="line">counts=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(word)==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        counts[word]=counts.get(word,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key = <span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse =<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    word,count = items[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(word,count))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231016203325170.png" alt="image-20231016203325170"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>《红楼梦》出场频率前20位角色</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">txt = <span class="built_in">open</span> (<span class="string">&quot;红楼梦.txt&quot;</span>,<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;ANSI&quot;</span>).read()</span><br><span class="line">words = jieba.lcut(txt)</span><br><span class="line">excludes =&#123;<span class="string">&quot;一声&quot;</span>,<span class="string">&quot;媳妇&quot;</span>,<span class="string">&quot;不用&quot;</span>,<span class="string">&quot;人家&quot;</span>,<span class="string">&quot;妹妹&quot;</span>,<span class="string">&quot;看见&quot;</span>,<span class="string">&quot;问道&quot;</span>,<span class="string">&quot;如何&quot;</span>,<span class="string">&quot;二爷&quot;</span>,<span class="string">&quot;屋里&quot;</span>,<span class="string">&quot;丫头&quot;</span>,<span class="string">&quot;小丫头&quot;</span>,<span class="string">&quot;听说&quot;</span>,<span class="string">&quot;什么&quot;</span>,<span class="string">&quot;一个&quot;</span>,<span class="string">&quot;我们&quot;</span>,<span class="string">&quot;那里&quot;</span>,<span class="string">&quot;如今&quot;</span>,<span class="string">&quot;你们&quot;</span>,<span class="string">&quot;说道&quot;</span>,<span class="string">&quot;知道&quot;</span>,<span class="string">&quot;起来&quot;</span>,<span class="string">&quot;姑娘&quot;</span>,<span class="string">&quot;这里&quot;</span>,<span class="string">&quot;出来&quot;</span>,<span class="string">&quot;他们&quot;</span>,<span class="string">&quot;众人&quot;</span>,<span class="string">&quot;自己&quot;</span>,<span class="string">&quot;进来&quot;</span>,<span class="string">&quot;这样&quot;</span>,<span class="string">&quot;听见&quot;</span>,<span class="string">&quot;这个&quot;</span>,<span class="string">&quot;不知&quot;</span>,<span class="string">&quot;不是&quot;</span>,<span class="string">&quot;没有&quot;</span>,<span class="string">&quot;两个&quot;</span>,<span class="string">&quot;怎么&quot;</span>,<span class="string">&quot;只见&quot;</span>,<span class="string">&quot;自己&quot;</span>,<span class="string">&quot;一面&quot;</span>,<span class="string">&quot;大家&quot;</span>,<span class="string">&quot;只是&quot;</span>,<span class="string">&quot;回来&quot;</span>,<span class="string">&quot;就是&quot;</span>,<span class="string">&quot;东西&quot;</span>,<span class="string">&quot;咱们&quot;</span>,<span class="string">&quot;告诉&quot;</span>,<span class="string">&quot;所以&quot;</span>,<span class="string">&quot;出去&quot;</span>,<span class="string">&quot;不敢&quot;</span>,<span class="string">&quot;这些&quot;</span>,<span class="string">&quot;只得&quot;</span>,<span class="string">&quot;不好&quot;</span>,<span class="string">&quot;的话&quot;</span>,<span class="string">&quot;不过&quot;</span>,<span class="string">&quot;一时&quot;</span>,<span class="string">&quot;姐姐&quot;</span>,<span class="string">&quot;太太&quot;</span>,<span class="string">&quot;奶奶&quot;</span>,<span class="string">&quot;过来&quot;</span>,<span class="string">&quot;不能&quot;</span>,<span class="string">&quot;心里&quot;</span>,<span class="string">&quot;老爷&quot;</span>,<span class="string">&quot;二人&quot;</span>,<span class="string">&quot;银子&quot;</span>,<span class="string">&quot;今日&quot;</span>,<span class="string">&quot;如此&quot;</span>,<span class="string">&quot;还有&quot;</span>,<span class="string">&quot;几个&quot;</span>,<span class="string">&quot;答应&quot;</span>,<span class="string">&quot;这么&quot;</span>,<span class="string">&quot;说话&quot;</span>,<span class="string">&quot;只管&quot;</span>,<span class="string">&quot;一回&quot;</span>,<span class="string">&quot;那边&quot;</span>,<span class="string">&quot;这话&quot;</span>,<span class="string">&quot;外头&quot;</span>,<span class="string">&quot;打发&quot;</span>,<span class="string">&quot;自然&quot;</span>,<span class="string">&quot;今儿&quot;</span>,<span class="string">&quot;罢了&quot;</span>,<span class="string">&quot;那些&quot;</span>&#125;</span><br><span class="line">counts=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(word)==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> word == <span class="string">&quot;宝玉&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;贾宝玉&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word ==<span class="string">&quot;凤姐&quot;</span> <span class="keyword">or</span> word ==<span class="string">&quot;凤姐儿&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;王熙凤&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word == <span class="string">&quot;老太太&quot;</span>:</span><br><span class="line">        rword =<span class="string">&quot;贾母&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word ==<span class="string">&quot;宝钗&quot;</span>:</span><br><span class="line">        rword = <span class="string">&quot;薛宝钗&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word ==<span class="string">&quot;探春&quot;</span>:</span><br><span class="line">        rword =<span class="string">&quot;贾探春&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word ==<span class="string">&quot;湘云&quot;</span>:</span><br><span class="line">        rword =<span class="string">&quot;史湘云&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> word ==<span class="string">&quot;黛玉&quot;</span>:</span><br><span class="line">        rword =<span class="string">&quot;林黛玉&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rword =word</span><br><span class="line">    counts[rword]=counts.get(rword,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> excludes:</span><br><span class="line">    <span class="keyword">del</span> counts[word]</span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key = <span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse =<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    word,count = items[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0:&lt;10&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(word,count))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231016203536082.png" alt="image-20231016203536082"></p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>《红楼梦》词云</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wordcloud</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">txt =<span class="built_in">open</span> (<span class="string">&quot;红楼梦.txt&quot;</span>,<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;ANSI&quot;</span>).read()</span><br><span class="line">w = wordcloud.WordCloud(width=<span class="number">1000</span>, font_path=<span class="string">&quot;msyh.ttc&quot;</span>, height=<span class="number">700</span>)</span><br><span class="line">w.generate(<span class="string">&quot; &quot;</span>.join(jieba.lcut(txt)))</span><br><span class="line">w.to_file(<span class="string">&quot;hlm_name.png&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/hlm_name.jpg" alt="hlm_name"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python作业05</title>
      <link href="/2023/10/08/python-homework05/"/>
      <url>/2023/10/08/python-homework05/</url>
      
        <content type="html"><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>Define a function that can accept an integer number as input and print  the “It is an even number” if the number is even, otherwise print “It is  an odd number”.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">checkValue</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;It is an even number&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;It is an odd number&quot;</span>)</span><br><span class="line">checkValue(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008223843267.png" alt="image-20231008223843267"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>Define a function that can accept two strings as input and print the  string with maximum length in console. If two strings have the same  length, then the function should print al l strings line by line.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">s1,s2</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s1)&gt;<span class="built_in">len</span>(s2):</span><br><span class="line">        <span class="built_in">print</span>(s1)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">len</span>(s1)&lt;<span class="built_in">len</span>(s2):</span><br><span class="line">        <span class="built_in">print</span>(s2)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(s1)</span><br><span class="line">        <span class="built_in">print</span>(s2)</span><br><span class="line">f(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;23&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">f(<span class="string">&quot;12&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">f(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008223928633.png" alt="image-20231008223928633"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>Define a function that can accept two strings as input and concatenate  them and then print it in console.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">s1,s2</span>):</span><br><span class="line">    s=s1+s2</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">s1 = <span class="built_in">input</span>(<span class="string">&quot;s1:&quot;</span>)</span><br><span class="line">s2 = <span class="built_in">input</span>(<span class="string">&quot;s2:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f(s1,s2))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008224011810.png" alt="image-20231008224011810"></p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>Define a function that can receive two integral numbers in string form  and compute their sum and then print it in console.</p><p>分析：字符串转int，然后计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n1,n2</span>):</span><br><span class="line">    n = <span class="built_in">int</span>(n1)+<span class="built_in">int</span>(n2)</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">s1 = <span class="built_in">input</span>(<span class="string">&quot;s1:&quot;</span>)</span><br><span class="line">s2 = <span class="built_in">input</span>(<span class="string">&quot;s2:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f(s1,s2))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008224123058.png" alt="image-20231008224123058"></p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>Define a function that can convert a integer into a string and print it in  console.</p><p>int型转字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(n))</span><br><span class="line">f(<span class="number">15</span>)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008224401734.png" alt="image-20231008224401734"></p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p>Define a function that can convert a integer into a string and print it in  console.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">str</span>(n))</span><br><span class="line">f(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008224524878.png" alt="image-20231008224524878"></p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>Define a function which can compute the sum of two numbers.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n1,n2</span>):</span><br><span class="line">    <span class="keyword">return</span> n1+n2</span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">12</span>,<span class="number">345</span>))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008224606123.png" alt="image-20231008224606123"></p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p>Define a class, which have a class parameter and have a same instance  parameter</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Myclass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">a = Myclass()</span><br></pre></td></tr></table></figure><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p>Python has many built-in functions, and if you do not know how to use  it, you can read document online or find some books. But Python has a  built-in document function for every built-in functions. Please write a program to print some Python built-in functions  documents, such as abs(), int(), raw_input() And add document for your own function</p><p>分析：使用<code>__doc__()</code>方法可以输出函数内的注释</p><p><img src="http://qnimg.xblog1.top/typora/image-20231008224934341.png" alt="image-20231008224934341"></p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p>Write a method which can calculate square value of number</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(f(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008225059390.png" alt="image-20231008225059390"></p><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p>Write a program to compute the frequency of the words from the input.  The output should output after sorting the key alphanumerically. </p><p>分析：字符串处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;Please input a sentence:&quot;</span>)</span><br><span class="line">words =s.split()</span><br><span class="line">counts =&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    counts[word]=counts.get(word,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    word,count =item</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(word,count))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008225247008.png" alt="image-20231008225247008"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python作业04</title>
      <link href="/2023/10/08/python-homework04/"/>
      <url>/2023/10/08/python-homework04/</url>
      
        <content type="html"><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>Define a class named Circle which can be constructed by a radius. The Circle  class has a method which can compute the area. </p><p>分析：考察构造函数和类方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,r</span>):</span><br><span class="line">        self.radius=r</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.radius*self.radius</span><br><span class="line">c=Circle(<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(c.area())</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008184906370.png" alt="image-20231008184906370"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>Define a class named American and its subclass NewYorker.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">American</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewYorker</span> (<span class="title class_ inherited__">American</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        American.__init__(self)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008185007959.png" alt="image-20231008185007959"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>Define a class named American which has a static method called  printNationality.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">American</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printNationality</span>(<span class="params">Nationality</span>):</span><br><span class="line">        <span class="built_in">print</span>(Nationality)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>Write a program which can map() to make a list whose elements are square of  numbers between 1 and 20 (both included).</p><p>分析：lambda函数的用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>(s))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008185146207.png" alt="image-20231008185146207"></p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>Write a program which can filter() to make a list whose elements are even  number between 1 and 20 (both included).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x%<span class="number">2</span>==<span class="number">0</span>,<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(l))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008185242512.png" alt="image-20231008185242512"></p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p> Write a program which can map() and filter() to make a list whose elements  are square of even number in [1,2,3,4,5,6,7,8,9,10].</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">evenNumbers = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x%<span class="number">2</span>==<span class="number">0</span>, li))</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>(evenNumbers))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008185329371.png" alt="image-20231008185329371"></p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>Write a program which can map() to make a list whose elements are square of  elements in [1,2,3,4,5,6,7,8,9,10].</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">l =<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x**<span class="number">2</span>,li)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(l))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008185420941.png" alt="image-20231008185420941"></p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p> Write a program which can filter even numbers in a list by using filter function.  The list is: [1,2,3,4,5,6,7,8,9,10].</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line">l = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x%<span class="number">2</span>==<span class="number">0</span>,li)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(l))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008190431567.png" alt="image-20231008190431567"></p><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p>Write a program which accepts a string as input to print “Yes” if the string is  “yes” or “YES” or “Yes”, otherwise print “No”. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s =<span class="built_in">input</span>(<span class="string">&quot;Please input:&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> (s==<span class="string">&quot;yes&quot;</span> <span class="keyword">or</span> s==<span class="string">&quot;YES&quot;</span><span class="keyword">or</span> s==<span class="string">&quot;Yes&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008190554236.png" alt="image-20231008190554236"></p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p>Write a program to generate and print another tuple whose values are even  numbers in the given tuple (1,2,3,4,5,6,7,8,9,10).</p><p>分析：考察元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t =(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line">l = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> t:</span><br><span class="line">    <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>):</span><br><span class="line">        l.append(i)</span><br><span class="line">t1=<span class="built_in">tuple</span>(l)</span><br><span class="line"><span class="built_in">print</span>(t1)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008190905188.png" alt="image-20231008190905188"></p><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p> With a given tuple (1,2,3,4,5,6,7,8,9,10), write a program to print the first half  values in one line and the last half values in one line. </p><p>分析：[a : b : c]表示从a到b步长为c取元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tp=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)</span><br><span class="line">tp1=tp[:<span class="number">5</span>]</span><br><span class="line">tp2=tp[<span class="number">5</span>:]</span><br><span class="line"><span class="built_in">print</span> (tp1)</span><br><span class="line"><span class="built_in">print</span> (tp2)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008191313661.png" alt="image-20231008191313661"></p><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><p> Define a function which can generate and print a tuple where the value are  square of numbers between 1 and 20 (both included). </p><p>分析：考察元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printTuple</span>():</span><br><span class="line">    li=<span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">        li.append(i**<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="built_in">tuple</span>(li))</span><br><span class="line">printTuple()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008191703271.png" alt="image-20231008191703271"></p><h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><p>Define a function which can generate a list where the values are square of  numbers between 1 and 20 (both included). Then the function needs to print all  values except the first 5 elements in the list.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printList</span>():</span><br><span class="line">    li=<span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">        li.append(i**<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span> (li[:<span class="number">5</span>])</span><br><span class="line">printList()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008192106761.png" alt="image-20231008192106761"></p><h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><p>Define a function which can generate a list where the values are square of  numbers between 1 and 20 (both included). Then the function needs to print  the last 5 elements in the list.</p><p>分析：考察列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printList</span>():</span><br><span class="line">    li=<span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">        li.append(i**<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span> (li[-<span class="number">5</span>:])</span><br><span class="line">printList()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008192357065.png" alt="image-20231008192357065"></p><h3 id="15"><a href="#15" class="headerlink" title="15"></a>15</h3><p> Define a function which can generate a list where the values are square of  numbers between 1 and 20 (both included). Then the function needs to print  the first 5 elements in the list.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printList</span>():</span><br><span class="line">    li=<span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">        li.append(i**<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span> (li[:<span class="number">5</span>])</span><br><span class="line">printList()</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008205658001.png" alt="image-20231008205658001"></p><h3 id="16"><a href="#16" class="headerlink" title="16"></a>16</h3><p>Define a function which can generate and print a list where the values are  square of numbers between 1 and 20 (both included).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printList</span>():</span><br><span class="line">    li=<span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">        li.append(i**<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span> (li)</span><br><span class="line">printList()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008205748601.png" alt="image-20231008205748601"></p><h3 id="17"><a href="#17" class="headerlink" title="17"></a>17</h3><p>Define a function which can generate a dictionary where the keys are numbers  between 1 and 20 (both included) and the values are square of keys. The  function should just print the keys only.</p><p>分析：考察字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printDict</span>():</span><br><span class="line">    d=<span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">        d[i]=i**<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> d.keys():</span><br><span class="line">        <span class="built_in">print</span> (k,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">printDict()</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008205846615.png" alt="image-20231008205846615"></p><h3 id="18"><a href="#18" class="headerlink" title="18"></a>18</h3><p> Define a function which can generate a dictionary where the keys are numbers  between 1 and 20 (both included) and the values are square of keys. The  function should just print the values only.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printDict</span>():</span><br><span class="line">    d=<span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">        d[i]=i**<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> d.values():</span><br><span class="line">        <span class="built_in">print</span> (v,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">printDict()</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008205944478.png" alt="image-20231008205944478"></p><h3 id="19"><a href="#19" class="headerlink" title="19"></a>19</h3><p> Define a function which can print a dictionary where the keys are numbers  between 1 and 20 (both included) and the values are square of keys.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printDict</span>():</span><br><span class="line">    d=<span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">        d[i]=i**<span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span> (d)</span><br><span class="line">printDict()</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008210023070.png" alt="image-20231008210023070"></p><h3 id="20"><a href="#20" class="headerlink" title="20"></a>20</h3><p>Define a function which can print a dictionary where the keys are numbers  between 1 and 3 (both included) and the values are square of keys.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printDict</span>():</span><br><span class="line">    d=<span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">4</span>):</span><br><span class="line">        d[i]=i**<span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span> (d)</span><br><span class="line">printDict()</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231008210112353.png" alt="image-20231008210112353"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python作业03</title>
      <link href="/2023/09/27/python-homework03/"/>
      <url>/2023/09/27/python-homework03/</url>
      
        <content type="html"><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>Please generate a random float where the value is between 5 and 95  using Python math module.</p><p>Use random.random() to generate a random float in [0,1].</p><p>分析：random.random()可以生成随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">x = random.random()</span><br><span class="line"><span class="comment"># random.random()用于生成一个0到1的随机符点数: 0 &lt;= n &lt; 1.0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">5</span>+x*<span class="number">90</span>)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007204145109.png" alt="image-20231007204145109"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p> Please generate a random float where the value is between 10 and 100  using Python math module.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(<span class="number">10</span>+random.random()*<span class="number">90</span>)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007204258393.png" alt="image-20231007204258393"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p> Please write a binary search function which searches an item in a  sorted list. The function should return the index of element to be  searched in the list.</p><p>分析：二分查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">li =[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">15</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">x,l,r</span>):</span><br><span class="line">    <span class="keyword">if</span> l&gt;r:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> l==r <span class="keyword">and</span> li[l]!=x :</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;not found&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> l==r <span class="keyword">and</span> li[l]==x :</span><br><span class="line">        <span class="keyword">return</span> l</span><br><span class="line">    <span class="keyword">elif</span> li[(l+r)//<span class="number">2</span>] == x :</span><br><span class="line">        <span class="keyword">return</span> (l+r)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> li[(l+r)//<span class="number">2</span>]&gt;x:</span><br><span class="line">        <span class="keyword">return</span> search(x,l,(l+r)//<span class="number">2</span>-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> search(x,(l+r)//<span class="number">2</span>+<span class="number">1</span>,r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;&#123;&#125;在第&#123;&#125;位&quot;</span>.<span class="built_in">format</span>(li[i],search(li[i],<span class="number">0</span>,<span class="number">6</span>)) )</span><br></pre></td></tr></table></figure><img src="http://qnimg.xblog1.top/typora/image-20231007204501377.png" alt="image-20231007204501377"  /><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p> Please write a binary search function which searches an item in a  sorted list. The function should return the index of element to be  searched in the list.</p><p>分析：二分查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">li =[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">15</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">x,l,r</span>):</span><br><span class="line">    <span class="keyword">if</span> l&gt;r:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> l==r <span class="keyword">and</span> li[l]!=x :</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;not found&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> l==r <span class="keyword">and</span> li[l]==x :</span><br><span class="line">        <span class="keyword">return</span> l</span><br><span class="line">    <span class="keyword">elif</span> li[(l+r)//<span class="number">2</span>] == x :</span><br><span class="line">        <span class="keyword">return</span> (l+r)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> li[(l+r)//<span class="number">2</span>]&gt;x:</span><br><span class="line">        <span class="keyword">return</span> search(x,l,(l+r)//<span class="number">2</span>-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        <span class="keyword">return</span> search(x,(l+r)//<span class="number">2</span>+<span class="number">1</span>,r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;&#123;&#125;在第&#123;&#125;位&quot;</span>.<span class="built_in">format</span>(li[i],search(li[i],<span class="number">0</span>,<span class="number">6</span>)) )</span><br></pre></td></tr></table></figure><img src="http://qnimg.xblog1.top/typora/image-20231007204501377.png" alt="image-20231007204501377"  /><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p> Please write a program which accepts basic mathematic expression  from console and print the evaluation result.</p><p>分析：eval()可以把读入的字符串转换为数学表达式并计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入数学表达式:&quot;</span>)))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007204856947.png" alt="image-20231007204856947"></p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p>Please write assert statements to verify that every number in the list  [2,4,6,8] is even.</p><p>分析：Python assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li=[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li:</span><br><span class="line">    <span class="keyword">assert</span> i%<span class="number">2</span>==<span class="number">0</span></span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007205209335.png" alt="image-20231007205209335"></p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>Please write a program using generator to print the numbers which can  be divisible by 5 and 7 between 0 and n in comma separated form  while n is input by console.</p><p>分析：yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">input</span>(<span class="string">&quot;Please input n:&quot;</span>)</span><br><span class="line">n = <span class="built_in">int</span> (n)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i*<span class="number">35</span>&lt;n:</span><br><span class="line">        <span class="keyword">yield</span> i*<span class="number">35</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fun():</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007212047286.png" alt="image-20231007212047286"></p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p>Please write a program using generator to print the even numbers  between 0 and n in comma separated form while n is input by console.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">input</span>(<span class="string">&quot;please input n:&quot;</span>)</span><br><span class="line">n = <span class="built_in">int</span>(n)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    i =<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;=n:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i+=<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fun():</span><br><span class="line">    <span class="keyword">if</span> i==n <span class="keyword">or</span> i+<span class="number">1</span>==n:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(i,end=<span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007212202423.png" alt="image-20231007212202423"></p><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p> The Fibonacci Sequence is computed based on the following formula:</p><p> f(n)&#x3D;0 if n&#x3D;0 </p><p>f(n)&#x3D;1 if n&#x3D;1 </p><p>f(n)&#x3D;f(n-1)+f(n-2) if n&gt;1 </p><p>Please write a program using list comprehension to print the Fibonacci  Sequence in comma separated form with a given n input by console.</p><p>分析：递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">li=[]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params"> n </span>):</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">       <span class="keyword">return</span> fun(n-<span class="number">1</span>)+fun(n-<span class="number">2</span>)</span><br><span class="line">n = <span class="built_in">int</span> (<span class="built_in">input</span>(<span class="string">&quot;Please input n:&quot;</span>))</span><br><span class="line">values = [<span class="built_in">str</span>(fun(x)) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n+<span class="number">1</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;,&quot;</span>.join(values))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007212325499.png" alt="image-20231007212325499"></p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p>The Fibonacci Sequence is computed based on the following formula: </p><p>f(n)&#x3D;0 if n&#x3D;0 </p><p>f(n)&#x3D;1 if n&#x3D;1 </p><p>f(n)&#x3D;f(n-1)+f(n-2) if n&gt;1</p><p>Please write a program to compute the value of f(n) with a given n  input by console.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params"> n </span>):</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">       <span class="keyword">return</span> fun(n-<span class="number">1</span>)+fun(n-<span class="number">2</span>)</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input n:&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(fun(n))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007212817429.png" alt="image-20231007212817429"></p><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p> Write a program to compute:</p><p> f(n)&#x3D;f(n-1)+100 when n&gt;0 and f(0)&#x3D;1</p><p> with a given n input by console (n&gt;0).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">return</span> f(n-<span class="number">1</span>)+<span class="number">100</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input n:&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(n))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007221806889.png" alt="image-20231007221806889"></p><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><p>Write a program to compute 1&#x2F;2+2&#x2F;3+3&#x2F;4+…+n&#x2F;n+1 with a given n  input by console (n&gt;0).</p><p>分析：递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">return</span> f(n-<span class="number">1</span>)+n/(n+<span class="number">1</span>)</span><br><span class="line">n = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&quot;Please input n:&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(f(n)))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007221906161.png" alt="image-20231007221906161"></p><h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><p>Write a program to read an ASCII string and to convert it to a unicode  string encoded by utf-8.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;input:&quot;</span>)</span><br><span class="line">u = <span class="built_in">str</span>(s)</span><br><span class="line"><span class="built_in">print</span>(u)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007222013054.png" alt="image-20231007222013054"></p><h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><p>Write a program which accepts a sequence of words separated by  whitespace as input to print the words composed of digits only.</p><p>分析：考察正则表达式 re.findall()可以查找字符串中所有匹配模式的子串，并以列表的形式存储</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 正则表达式</span></span><br><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;Please input a sequence:&quot;</span>)</span><br><span class="line">result1 = re.findall(<span class="string">r&#x27;\d+&#x27;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(result1)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007222321205.png" alt="image-20231007222321205"></p><h3 id="15"><a href="#15" class="headerlink" title="15"></a>15</h3><p> Assuming that we have some email addresses in the  “<a href="mailto:&#x75;&#x73;&#x65;&#x72;&#x6e;&#97;&#109;&#x65;&#64;&#x63;&#x6f;&#109;&#x70;&#x61;&#110;&#x79;&#110;&#97;&#109;&#x65;&#46;&#x63;&#111;&#109;">&#x75;&#x73;&#x65;&#x72;&#x6e;&#97;&#109;&#x65;&#64;&#x63;&#x6f;&#109;&#x70;&#x61;&#110;&#x79;&#110;&#97;&#109;&#x65;&#46;&#x63;&#111;&#109;</a>“ format, please write program to  print the company name of a given email address. Both user names and  company names are composed of letters only.</p><p>分析：正则表达式，re.sub()可以替换掉匹配模式的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 正则表达式</span></span><br><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;Please input a sequence:&quot;</span>)</span><br><span class="line">s = re.sub(<span class="string">r&#x27;^\w+@&#x27;</span>,<span class="string">&quot;&quot;</span>,s)</span><br><span class="line">companyname = re.sub(<span class="string">r&#x27;.com$&#x27;</span>,<span class="string">&quot;&quot;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(companyname)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007222551570.png" alt="image-20231007222551570"></p><h3 id="16"><a href="#16" class="headerlink" title="16"></a>16</h3><p> Assuming that we have some email addresses in the  “<a href="mailto:&#117;&#x73;&#101;&#114;&#x6e;&#97;&#x6d;&#x65;&#64;&#x63;&#111;&#109;&#112;&#97;&#x6e;&#x79;&#110;&#97;&#x6d;&#101;&#x2e;&#99;&#x6f;&#109;">&#117;&#x73;&#101;&#114;&#x6e;&#97;&#x6d;&#x65;&#64;&#x63;&#111;&#109;&#112;&#97;&#x6e;&#x79;&#110;&#97;&#x6d;&#101;&#x2e;&#99;&#x6f;&#109;</a>“ format, please write program to  print the user name of a given email address. Both user names and  company names are composed of letters only</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">adress = <span class="built_in">input</span>(<span class="string">&quot;please input a email adress:&quot;</span>)</span><br><span class="line">username = re.sub(<span class="string">r&#x27;@\w+.com&#x27;</span>,<span class="string">&quot;&quot;</span>,adress)</span><br><span class="line"><span class="built_in">print</span>(username)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007222856600.png" alt="image-20231007222856600"></p><h3 id="17"><a href="#17" class="headerlink" title="17"></a>17</h3><p>Define a custom exception class which takes a string message as  attribute.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,msg</span>):</span><br><span class="line">        self.msg = msg</span><br><span class="line">error = MyError(<span class="string">&quot;something wrong&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007223008404.png" alt="image-20231007223008404"></p><h3 id="18"><a href="#18" class="headerlink" title="18"></a>18</h3><p>Write a function to compute 5&#x2F;0 and use try&#x2F;except to catch the  exceptions.</p><p>分析：考察 异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>/<span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f()</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;division by zero&quot;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;In finally block for cleanup&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007223221881.png" alt="image-20231007223221881"></p><h3 id="19"><a href="#19" class="headerlink" title="19"></a>19</h3><p>Define a class named Shape and its subclass Square. The Square class  has an init function which takes a length as argument. Both classes  have a area function which can print the area of the shape where  Shape’s area is 0 by default.</p><p>分析：考察类的继承 和 方法的覆写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> (<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span>(<span class="title class_ inherited__">Shape</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,l</span>):</span><br><span class="line">        Shape.__init__(self)</span><br><span class="line">        self.length = l</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self .length*self.length</span><br><span class="line">aSquare=Square(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(aSquare.area())</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007223558951.png" alt="image-20231007223558951"></p><h3 id="20"><a href="#20" class="headerlink" title="20"></a>20</h3><p> Define a class named Rectangle which can be constructed by a length  and width. The Rectangle class has a method which can compute the  area. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,l,w</span>):</span><br><span class="line">        self.length =l</span><br><span class="line">        self.width = w</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.length*self.width</span><br><span class="line">a =Rectangle(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(a.area())</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20231007223702836.png" alt="image-20231007223702836"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python作业02</title>
      <link href="/2023/09/15/python-homework02/"/>
      <url>/2023/09/15/python-homework02/</url>
      
        <content type="html"><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p> By using list comprehension, please write a program to print the list after  removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].</p><p>Use list comprehension to delete a bunch of element from a list. Use enumerate() to get (index, value) tuple.</p><p>分析：使用推导式删除第0，4，5位元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l =  [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">l= [data <span class="keyword">for</span> i,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(l) <span class="keyword">if</span>(i!=<span class="number">0</span> <span class="keyword">and</span> i!=<span class="number">4</span> <span class="keyword">and</span> i!=<span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span> (l)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="http://qnimg.xblog1.top/typora/image-20230916025325208.png" alt="image-20230916025325208"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>By using list comprehension, please write a program generate a 3<em>5</em>8 3D  array whose each element is 0.</p><p>Use list comprehension to make an array.</p><p>分析：用三个循环嵌套生成三维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l1 = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">3</span>)]  <span class="comment"># 一维</span></span><br><span class="line">l2 = [l1 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">5</span>)]  <span class="comment"># 二维</span></span><br><span class="line">l3 = [l2 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">8</span>)]  <span class="comment"># 三维</span></span><br><span class="line"><span class="built_in">print</span> (l3)</span><br></pre></td></tr></table></figure><img src="http://qnimg.xblog1.top/typora/image-20230916030018811.png" alt="image-20230916030018811"  /><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>By using list comprehension, please write a program to print the list after  removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].</p><p>Use list comprehension to delete a bunch of element from a list. Use enumerate() to get (index, value) tuple.</p><p>分析：用推导式删去偶数位的元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l =  [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">l= [data <span class="keyword">for</span> i,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(l) <span class="keyword">if</span> i%<span class="number">2</span>!=<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span> (l)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20230916030128818.png" alt="image-20230916030128818"></p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p>By using list comprehension, please write a program to print the list after  removing delete numbers which are divisible by 5 and 7 in  [12,24,35,70,88,120,155].</p><p>Use list comprehension to delete a bunch of element from a list.</p><p>分析：推导式遍历列表，排除能被5或7整除的数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">l = [x <span class="keyword">for</span> x <span class="keyword">in</span> l <span class="keyword">if</span> (x%<span class="number">5</span>!=<span class="number">0</span> <span class="keyword">and</span> x%<span class="number">7</span>!=<span class="number">0</span>)]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20230916030305116.png" alt="image-20230916030305116"></p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>Please write a program to print the list after removing delete even  numbers in [5,6,77,45,22,12,24].</p><p>Use list comprehension to delete a bunch of element from a list</p><p>分析：使用推导式排除偶数</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">77</span>,<span class="number">45</span>,<span class="number">22</span>,<span class="number">12</span>,<span class="number">24</span>]</span><br><span class="line">l = [x <span class="keyword">for</span> x <span class="keyword">in</span> l <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(l)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20230916030329733.png" alt="image-20230916030329733"></p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p>Please write a program to generate all sentences where subject is in [“I”,  “You”] and verb is in [“Play”, “Love”] and the object is in  [“Hockey”,”Football”].</p><p>Use list[index] notation to get a element from a list.</p><p>分析：用三层循环嵌套，遍历每一种组合</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">subject = [<span class="string">&quot;I&quot;</span>, <span class="string">&quot;You&quot;</span>]</span><br><span class="line">verb = [<span class="string">&quot;Play&quot;</span>, <span class="string">&quot;Love&quot;</span>]</span><br><span class="line">ob = [<span class="string">&quot;Hockey&quot;</span>,<span class="string">&quot;Football&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> subject:</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> verb:</span><br><span class="line">        <span class="keyword">for</span> z <span class="keyword">in</span> ob:</span><br><span class="line">            sentence =x+<span class="string">&#x27; &#x27;</span>+y+ <span class="string">&#x27; &#x27;</span>+z</span><br><span class="line">            <span class="built_in">print</span>(sentence)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20230916030355896.png" alt="image-20230916030355896"></p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>Please write a program to shuffle and print the list [3,6,7,8].</p><p>Use shuffle() function to shuffle a list</p><p>分析：shuffle()可将列表顺序变成随机，并输出</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">l = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">random.shuffle(l)</span><br><span class="line"><span class="built_in">print</span> (l)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20230916030427024.png" alt="image-20230916030427024"></p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p>Please write a program to print the running time of execution of “1+1” for  100 times.</p><p>Use timeit() function to measure the running time.</p><p>分析：timeit()可以测试语句的运行时间</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> Timer</span><br><span class="line">t = Timer(<span class="string">&quot;for i in range(100):1+1&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (t.timeit())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20230916030449623.png" alt="image-20230916030449623"></p><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p>Use zlib.compress() and zlib.decompress() to compress and decompress a  string.</p><p>分析：用zlib下的函数进行字符串的压缩和解压</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line">s = <span class="string">&quot;B21031618&quot;</span></span><br><span class="line">s1 = zlib.compress(s,<span class="number">1</span>)</span><br><span class="line">s2= zlib.decompress(s1)</span><br><span class="line"><span class="built_in">print</span> (s2)</span><br></pre></td></tr></table></figure><p>运行错误，代码有问题</p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p>Please write a program to randomly print a integer number between 7 and  15 inclusive.</p><p>Use random.randrange() to a random integer in a given range.</p><p>分析：randrange() 方法返回指定递增基数集合中的一个随机数，基数默认值为1。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.randrange(<span class="number">5</span>,<span class="number">16</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20230916030654004.png" alt="image-20230916030654004"></p><h3 id="11"><a href="#11" class="headerlink" title="11"></a>11</h3><p> Please write a program to randomly generate a list with 5 numbers, which  are divisible by 5 and 7 , between 1 and 1000 inclusive.</p><p>Use random.sample() to generate a list of random values.</p><p>分析：sample(l,k)从列表l中随机选取k个值组成新的列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">l1 = [x for x in range(1,1001) if (x%5==0 and x%7==0)]</span><br><span class="line">l2=random.sample(l1,5)</span><br><span class="line">print(l2)</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20230916030736287.png" alt="image-20230916030736287"></p><h3 id="12"><a href="#12" class="headerlink" title="12"></a>12</h3><p>Please write a program to randomly generate a list with 5 even numbers  between 100 and 200 inclusive.</p><p>Use random.sample() to generate a list of random values.</p><p>分析：同11，加上偶数的筛选条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span> (random.sample([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">201</span>) <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>], <span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20230916030813207.png" alt="image-20230916030813207"></p><h3 id="13"><a href="#13" class="headerlink" title="13"></a>13</h3><p> Please write a program to generate a list with 5 random numbers between  100 and 200 inclusive.</p><p>Use random.sample() to generate a list of random values.</p><p>分析：同11</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>( random.sample([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">201</span>)],<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20230916030843283.png" alt="image-20230916030843283"></p><h3 id="14"><a href="#14" class="headerlink" title="14"></a>14</h3><p>Please write a program to output a random number, which is divisible by 5  and 7, between 0 and 100 inclusive using random module and list  comprehension.</p><p>Use random.choice() to a random element from a list</p><p>分析：从0~100内任选一个可以被5和7整除的数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.choice([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>)<span class="keyword">if</span> (x % <span class="number">5</span>==<span class="number">0</span> <span class="keyword">and</span> x %<span class="number">7</span>==<span class="number">0</span>)] ))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20230916030922472.png" alt="image-20230916030922472"></p><h3 id="15"><a href="#15" class="headerlink" title="15"></a>15</h3><p>Please write a program to output a random even number between 0 and  10 inclusive using random module and list comprehension</p><p>Use random.choice() to a random element from a list.</p><p>分析：从0~10任选一个偶数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.choice([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]))</span><br></pre></td></tr></table></figure><p><img src="http://qnimg.xblog1.top/typora/image-20230916030950174.png" alt="image-20230916030950174"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web程序设计笔记第二章-HTML/XHTML</title>
      <link href="/2023/09/11/Web%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%8C%E7%AB%A0-HTML/"/>
      <url>/2023/09/11/Web%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%BA%8C%E7%AB%A0-HTML/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-HTML和XHTML的起源和演变"><a href="#2-1-HTML和XHTML的起源和演变" class="headerlink" title="2.1 HTML和XHTML的起源和演变"></a>2.1 HTML和XHTML的起源和演变</h2><p>略</p><h2 id="2-2-基本语法"><a href="#2-2-基本语法" class="headerlink" title="2.2 基本语法"></a>2.2 基本语法</h2><p>HTML的基本语法单位称为 <strong>标签</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是html的注释格式 --&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-HTML文档的标准结构"><a href="#2-3-HTML文档的标准结构" class="headerlink" title="2.3 HTML文档的标准结构"></a>2.3 HTML文档的标准结构</h2><p>html的声明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>html文档必须包含的四组标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span> <span class="comment">&lt;!-- html元素可以包含一个特性 lang，用于指定编写文档所用的语言 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span>  <span class="comment">&lt;!-- 一个文档包含 头(head)和主体(body)两部分 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>这是文档的标题，显示在浏览器顶部的标题栏<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> =<span class="string">&quot;utf-8&quot;</span>/&gt;</span><span class="comment">&lt;!-- meta 元素用于提供关于文档的额外信息 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-基本的文本标记"><a href="#2-4-基本的文本标记" class="headerlink" title="2.4 基本的文本标记"></a>2.4 基本的文本标记</h2><h3 id="2-4-1-段落"><a href="#2-4-1-段落" class="headerlink" title="2.4.1 段落"></a>2.4.1 段落</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    adf </span><br><span class="line">    da dsaf</span><br><span class="line">     fda</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">浏览器会忽略换行符，将<span class="tag">&lt;<span class="name">p</span>&gt;</span>中的文本填充为一行，在每行末尾自动换行</span><br><span class="line">如果<span class="tag">&lt;<span class="name">p</span>&gt;</span>不在行首位置，浏览器会自动从<span class="tag">&lt;<span class="name">p</span>&gt;</span>换行，并在中间插入一个空白行</span><br></pre></td></tr></table></figure><p> 上图运行结果为：</p><p>    adf     da dsaf         fda</p>### 2.4.2 换行<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">常用于<span class="tag">&lt;<span class="name">p</span>&gt;</span>和<span class="tag">&lt;/<span class="name">p</span>&gt;</span>之间的文本中，起换行符的作用</span><br></pre></td></tr></table></figure><h3 id="2-4-3-保留空白字符"><a href="#2-4-3-保留空白字符" class="headerlink" title="2.4.3 保留空白字符"></a>2.4.3 保留空白字符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">    adf </span><br><span class="line">    da dsaf</span><br><span class="line">     fda</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行效果如下：</p><pre>    adf     da dsaf         fda</pre><h3 id="2-4-4-标题"><a href="#2-4-4-标题" class="headerlink" title="2.4.4 标题"></a>2.4.4 标题</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">由大到小，共有<span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">h5</span>&gt;</span>和<span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题</span><br><span class="line"></span><br><span class="line">其中,<span class="tag">&lt;<span class="name">h4</span>&gt;</span>为默认字体大小</span><br></pre></td></tr></table></figure><p>标题标签会导致换行</p><h3 id="2-4-5-文本块引用"><a href="#2-4-5-文本块引用" class="headerlink" title="2.4.5 文本块引用"></a>2.4.5 文本块引用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        afa;fjadfafafdsdddddddddddddddddddddddddddddddddd</span><br><span class="line">        dddddddddddddddddddddddddddd</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>标签会将在其中间的文本进行双向缩进，但是在markdown中效果为引用栏</span><br></pre></td></tr></table></figure><h3 id="2-4-6-字体样式与大小"><a href="#2-4-6-字体样式与大小" class="headerlink" title="2.4.6 字体样式与大小"></a>2.4.6 字体样式与大小</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">强调标签</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span><br><span class="line">    效果为斜体</span><br><span class="line"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">强调标签</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><br><span class="line">粗体</span><br><span class="line"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">代码标签</span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">用于指定等宽字体，常用于代码</span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">上标<span class="tag">&lt;<span class="name">sup</span>&gt;</span>和下标<span class="tag">&lt;<span class="name">sub</span>&gt;</span></span><br><span class="line">x<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">sup</span>&gt;</span>3<span class="tag">&lt;/<span class="name">sup</span>&gt;</span>+y<span class="tag">&lt;<span class="name">sub</span>&gt;</span>1<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><em>    效果为斜体<br></em><br><strong><br>    粗体<br></strong><br><code><br>用于指定等宽字体，常用于代码<br></code></p><p>x<sub>2</sub><sup>3</sup>+y<sub>1</sub><sup>2</sup></p><h3 id="2-4-7-字符实体"><a href="#2-4-7-字符实体" class="headerlink" title="2.4.7 字符实体"></a>2.4.7 字符实体</h3><p>&amp;nbsp；非换行空格</p><h3 id="2-4-8-水平线"><a href="#2-4-8-水平线" class="headerlink" title="2.4.8 水平线"></a>2.4.8 水平线</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">画一条水平的线条，分开上下文</span><br></pre></td></tr></table></figure><h3 id="2-4-9-meta元素的其他用法"><a href="#2-4-9-meta元素的其他用法" class="headerlink" title="2.4.9 meta元素的其他用法"></a>2.4.9 meta元素的其他用法</h3><p>用于提供附加信息    两个标签 name和content</p><h2 id="2-5-图片"><a href="#2-5-图片" class="headerlink" title="2.5 图片"></a>2.5 图片</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> =<span class="string">&quot;c210.jpg&quot;</span> <span class="attr">height</span> =<span class="string">&quot;200&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span><span class="attr">alt</span>= <span class="string">&quot;Picture of a Cessna 210&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>src 指定图片文件</p><p>alt 图片无法显示时用于替换的文本</p><p>width height 宽度和高度，也可以指定为百分比值</p><h2 id="2-6-超链接"><a href="#2-6-超链接" class="headerlink" title="2.6 超链接"></a>2.6 超链接</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.jd.com/&quot;</span>&gt;</span>京东<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">href指定资源地址</span><br><span class="line">在<span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>中使用 target=&quot;_blank&quot;  可在新窗口打开链接</span><br><span class="line"></span><br><span class="line">id 属性可用于创建一个 HTML 文档书签,点击后可以跳转到该id属性所在元素的位置</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;tips&quot;</span>&gt;</span>有用的提示部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tips&quot;</span>&gt;</span>访问有用的提示部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span>、</span><br><span class="line">download 属性可以指定该链接为下载链接</span><br></pre></td></tr></table></figure><p><a id="tips">有用的提示部分</a></p><p><a href="#tips">访问有用的提示部分</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> html </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python作业01</title>
      <link href="/2023/09/08/python-homework01/"/>
      <url>/2023/09/08/python-homework01/</url>
      
        <content type="html"><![CDATA[<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>Write a program to solve a classic ancient Chinese puzzle:<br>We count 35 heads and 94 legs among the chickens and rabbits in a<br>farm. How many rabbits and how many chickens do we have?</p><p>Use for loop to iterate all possible solutions.</p><p>分析：鸡的数量从0开始数，使用for循环，直到鸡兔腿数和等于94，输出并跳出循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">heads = <span class="number">35</span></span><br><span class="line">legs = <span class="number">94</span></span><br><span class="line">chickens = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> chickens <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,heads):</span><br><span class="line">    <span class="keyword">if</span> heads*<span class="number">4</span>-chickens*<span class="number">2</span> == legs:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;chickens:&quot;</span>,chickens)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;rabbits:&quot;</span>,heads-chickens)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行截图<br><img src="http://qnimg.xblog1.top/img/img.png" alt="img"></p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>Please write a program which prints all permutations of [1,2,3]</p><p>Use itertools.permutations() to get permutations of list.</p><p>分析: itertools.permutations()函数返回的是可迭代元素的全排列<br>如果直接输出则返回它所在的地址，需要使用for循环遍历所有排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]):</span><br><span class="line">    <span class="built_in">print</span>(i , end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><p>运行截图：<br><img src="http://qnimg.xblog1.top/img/img_1.png" alt="img_1"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>Please write a program which accepts a string from console and print<br>the characters that have even indexes.</p><p>Use list[::2] to iterate a list by step 2.</p><p>分析：输入字符串并以步长为2输出字符，可以使用input()读入，并使用list[::2]进行输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[::<span class="number">2</span>])</span><br></pre></td></tr></table></figure><p>运行截图：<br><img src="http://qnimg.xblog1.top/img/img_2.png" alt="img_2"></p><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><p> Please write a program which accepts a string from console and print<br>it in reverse order.</p><p>Use list[::-1] to iterate a list in a reverse order.</p><p>分析：list[::-1]中的-1表示逆向以步长为1输出字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>运行截图：<br><img src="http://qnimg.xblog1.top/img/img_3.png" alt="img_3"></p><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><p>Please write a program which count and print the numbers of each<br>character in a string input by console.</p><p>Use dict to store key&#x2F;value pairs.<br>Use dict.get() method to lookup a key with default value.</p><p>分析：使用字典dict进行统计，<br>dict.get(key, default&#x3D;None)<br>返回指定键的值，如果键不在字典中返回 default 设置的默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">st = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line">d = &#123; &#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> st:</span><br><span class="line">    d[i]=d.get(i,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d:</span><br><span class="line">    <span class="built_in">print</span>(i,<span class="string">&quot;,&quot;</span>,d[i])</span><br></pre></td></tr></table></figure><p>运行截图：<br><img src="http://qnimg.xblog1.top/img/img_4.png" alt="img_4"></p><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><p>Define a class Person and its two child classes: Male and Female. All<br>classes have a method “getGender” which can print “Male” for Male<br>class and “Female” for Female class.</p><p>Use Subclass(Parentclass) to define a child class.</p><p>分析：主要考察了类的继承，以及父类方法的覆写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getGender</span> (self):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Male</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getGender</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;Male&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Female</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getGender</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Female&quot;</span></span><br><span class="line">one =Male()</span><br><span class="line">two =Female()</span><br><span class="line"><span class="built_in">print</span>(one.getGender())</span><br><span class="line"><span class="built_in">print</span>(two.getGender())</span><br></pre></td></tr></table></figure><p>运行截图：<br><img src="http://qnimg.xblog1.top/typora/image-20240115072226377.png" alt="image-20240115072226377"></p><h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3><p>With a given list [12,24,35,24,88,120,155,88,120,155], write a program<br>to print this list after removing all duplicate values with original order<br>reserved.</p><p>Use set() to store a number of values without duplicate.</p><p>分析：主要考察集合set<br>set()  创建空集合<br>set.add()  添加新元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">24</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">s = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    s.add(i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="built_in">print</span>(i , end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><p>运行截图：<br><img src="http://qnimg.xblog1.top/typora/image-20240115072459048.png" alt="image-20240115072459048"></p><h3 id="8"><a href="#8" class="headerlink" title="8"></a>8</h3><p> By using list comprehension, please write a program to print the list<br>after removing the value 24 in [12,24,35,24,88,120,155].</p><p>Use list’s remove method to delete a value</p><p>分析：<br>s1 &amp;&#x3D;s2 相当于 s1&#x3D; s1&amp;s2 即取s1和s2的交集并赋给s1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">78</span>,<span class="number">35</span>,<span class="number">55</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">24</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>&#125;</span><br><span class="line">s1 &amp;= s2</span><br><span class="line">li =<span class="built_in">list</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure><p>运行截图：<br><img src="http://qnimg.xblog1.top/typora/image-20240115072516364.png" alt="image-20240115072516364"></p><h3 id="9"><a href="#9" class="headerlink" title="9"></a>9</h3><p>By using list comprehension, please write a program to print the list<br>after removing the value 24 in [12,24,35,24,88,120,155].</p><p>Use list’s remove method to delete a value.<br>分析：使用del删除第二个元素即24</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">24</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line"><span class="keyword">del</span> li[<span class="number">1</span>] <span class="comment">#删除24</span></span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure><p>运行截图：<br><img src="http://qnimg.xblog1.top/typora/image-20240115072534648.png" alt="image-20240115072534648"></p><h3 id="10"><a href="#10" class="headerlink" title="10"></a>10</h3><p>By using list comprehension, please write a program to print the list<br>after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].</p><p>Use list comprehension to delete a bunch of element from a<br>list.<br>Use enumerate() to get (index, value) tuple.</p><p>分析：主要考察推导式和enumerate() 函数<br>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">12</span>,<span class="number">24</span>,<span class="number">35</span>,<span class="number">70</span>,<span class="number">88</span>,<span class="number">120</span>,<span class="number">155</span>]</span><br><span class="line">li = [x <span class="keyword">for</span> (i,x) <span class="keyword">in</span> <span class="built_in">enumerate</span>(li) <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></table></figure><p>运行截图：</p><p><img src="http://qnimg.xblog1.top/typora/image-20240115072557011.png" alt="image-20240115072557011"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> 作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
